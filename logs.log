2023-12-06 19:44:38,300:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 19:44:38,300:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 19:44:38,300:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 19:44:38,300:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 19:45:38,076:INFO:PyCaret ClassificationExperiment
2023-12-06 19:45:38,076:INFO:Logging name: clf-default-name
2023-12-06 19:45:38,076:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-12-06 19:45:38,076:INFO:version 3.2.0
2023-12-06 19:45:38,076:INFO:Initializing setup()
2023-12-06 19:45:38,076:INFO:self.USI: 73d7
2023-12-06 19:45:38,076:INFO:self._variable_keys: {'fold_groups_param', 'seed', 'gpu_n_jobs_param', 'n_jobs_param', 'fold_shuffle_param', 'X_test', 'y_test', 'logging_param', 'fix_imbalance', '_available_plots', '_ml_usecase', 'gpu_param', 'X', 'is_multiclass', 'memory', 'log_plots_param', 'exp_id', 'target_param', 'idx', 'fold_generator', 'pipeline', 'data', 'html_param', 'USI', 'y_train', 'y', 'X_train', 'exp_name_log'}
2023-12-06 19:45:38,076:INFO:Checking environment
2023-12-06 19:45:38,076:INFO:python_version: 3.11.5
2023-12-06 19:45:38,076:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2023-12-06 19:45:38,076:INFO:machine: AMD64
2023-12-06 19:45:38,076:INFO:platform: Windows-10-10.0.22631-SP0
2023-12-06 19:45:38,090:INFO:Memory: svmem(total=8434700288, available=1070145536, percent=87.3, used=7364554752, free=1070145536)
2023-12-06 19:45:38,090:INFO:Physical Core: 4
2023-12-06 19:45:38,090:INFO:Logical Core: 8
2023-12-06 19:45:38,090:INFO:Checking libraries
2023-12-06 19:45:38,090:INFO:System:
2023-12-06 19:45:38,090:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2023-12-06 19:45:38,090:INFO:executable: c:\Users\sebas\anaconda3\envs\Modelos\python.exe
2023-12-06 19:45:38,090:INFO:   machine: Windows-10-10.0.22631-SP0
2023-12-06 19:45:38,090:INFO:PyCaret required dependencies:
2023-12-06 19:45:38,150:INFO:                 pip: 23.3.1
2023-12-06 19:45:38,150:INFO:          setuptools: 68.0.0
2023-12-06 19:45:38,150:INFO:             pycaret: 3.2.0
2023-12-06 19:45:38,150:INFO:             IPython: 8.18.1
2023-12-06 19:45:38,150:INFO:          ipywidgets: 8.1.1
2023-12-06 19:45:38,150:INFO:                tqdm: 4.66.1
2023-12-06 19:45:38,150:INFO:               numpy: 1.24.4
2023-12-06 19:45:38,150:INFO:              pandas: 1.5.3
2023-12-06 19:45:38,150:INFO:              jinja2: 3.1.2
2023-12-06 19:45:38,150:INFO:               scipy: 1.11.4
2023-12-06 19:45:38,150:INFO:              joblib: 1.3.2
2023-12-06 19:45:38,150:INFO:             sklearn: 1.2.2
2023-12-06 19:45:38,150:INFO:                pyod: 1.1.2
2023-12-06 19:45:38,150:INFO:            imblearn: 0.11.0
2023-12-06 19:45:38,150:INFO:   category_encoders: 2.6.3
2023-12-06 19:45:38,150:INFO:            lightgbm: 4.1.0
2023-12-06 19:45:38,150:INFO:               numba: 0.57.1
2023-12-06 19:45:38,150:INFO:            requests: 2.31.0
2023-12-06 19:45:38,150:INFO:          matplotlib: 3.8.2
2023-12-06 19:45:38,150:INFO:          scikitplot: 0.3.7
2023-12-06 19:45:38,150:INFO:         yellowbrick: 1.5
2023-12-06 19:45:38,150:INFO:              plotly: 5.18.0
2023-12-06 19:45:38,150:INFO:    plotly-resampler: Not installed
2023-12-06 19:45:38,150:INFO:             kaleido: 0.2.1
2023-12-06 19:45:38,150:INFO:           schemdraw: 0.15
2023-12-06 19:45:38,150:INFO:         statsmodels: 0.14.0
2023-12-06 19:45:38,150:INFO:              sktime: 0.21.1
2023-12-06 19:45:38,150:INFO:               tbats: 1.1.3
2023-12-06 19:45:38,150:INFO:            pmdarima: 2.0.3
2023-12-06 19:45:38,152:INFO:              psutil: 5.9.5
2023-12-06 19:45:38,152:INFO:          markupsafe: 2.1.3
2023-12-06 19:45:38,152:INFO:             pickle5: Not installed
2023-12-06 19:45:38,152:INFO:         cloudpickle: 3.0.0
2023-12-06 19:45:38,152:INFO:         deprecation: 2.1.0
2023-12-06 19:45:38,152:INFO:              xxhash: 3.4.1
2023-12-06 19:45:38,152:INFO:           wurlitzer: 3.0.3
2023-12-06 19:45:38,152:INFO:PyCaret optional dependencies:
2023-12-06 19:45:38,170:INFO:                shap: Not installed
2023-12-06 19:45:38,170:INFO:           interpret: Not installed
2023-12-06 19:45:38,170:INFO:                umap: 0.5.5
2023-12-06 19:45:38,170:INFO:     ydata_profiling: Not installed
2023-12-06 19:45:38,170:INFO:  explainerdashboard: Not installed
2023-12-06 19:45:38,170:INFO:             autoviz: Not installed
2023-12-06 19:45:38,170:INFO:           fairlearn: Not installed
2023-12-06 19:45:38,170:INFO:          deepchecks: Not installed
2023-12-06 19:45:38,170:INFO:             xgboost: Not installed
2023-12-06 19:45:38,176:INFO:            catboost: Not installed
2023-12-06 19:45:38,176:INFO:              kmodes: Not installed
2023-12-06 19:45:38,176:INFO:             mlxtend: Not installed
2023-12-06 19:45:38,176:INFO:       statsforecast: Not installed
2023-12-06 19:45:38,176:INFO:        tune_sklearn: Not installed
2023-12-06 19:45:38,176:INFO:                 ray: Not installed
2023-12-06 19:45:38,176:INFO:            hyperopt: Not installed
2023-12-06 19:45:38,176:INFO:              optuna: Not installed
2023-12-06 19:45:38,176:INFO:               skopt: Not installed
2023-12-06 19:45:38,176:INFO:              mlflow: Not installed
2023-12-06 19:45:38,176:INFO:              gradio: Not installed
2023-12-06 19:45:38,176:INFO:             fastapi: Not installed
2023-12-06 19:45:38,176:INFO:             uvicorn: Not installed
2023-12-06 19:45:38,176:INFO:              m2cgen: Not installed
2023-12-06 19:45:38,176:INFO:           evidently: Not installed
2023-12-06 19:45:38,176:INFO:               fugue: Not installed
2023-12-06 19:45:38,176:INFO:           streamlit: Not installed
2023-12-06 19:45:38,176:INFO:             prophet: Not installed
2023-12-06 19:45:38,176:INFO:None
2023-12-06 19:45:38,176:INFO:Set up data.
2023-12-06 19:45:38,200:INFO:Set up folding strategy.
2023-12-06 19:45:38,203:INFO:Set up train/test split.
2023-12-06 19:45:38,219:INFO:Set up index.
2023-12-06 19:45:38,221:INFO:Assigning column types.
2023-12-06 19:45:38,222:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-12-06 19:45:38,302:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-06 19:45:38,305:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-06 19:45:38,360:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-06 19:45:38,360:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-06 19:45:38,422:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-06 19:45:38,430:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-06 19:45:38,493:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-06 19:45:38,494:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-06 19:45:38,495:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-12-06 19:45:38,778:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-06 19:45:38,883:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-06 19:45:38,883:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-06 19:45:39,040:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-06 19:45:39,173:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-06 19:45:39,180:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-06 19:45:39,180:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-12-06 19:45:39,360:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-06 19:45:39,360:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-06 19:45:39,480:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-06 19:45:39,480:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-06 19:45:39,488:INFO:Preparing preprocessing pipeline...
2023-12-06 19:45:39,490:INFO:Set up label encoding.
2023-12-06 19:45:39,490:INFO:Set up simple imputation.
2023-12-06 19:45:39,490:INFO:Set up column name cleaning.
2023-12-06 19:45:39,551:INFO:Finished creating preprocessing pipeline.
2023-12-06 19:45:39,560:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\sebas\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['GENDER_1', 'GENDER_2', 'AGE',
                                             'SMOKING_1', 'SMOKING_2',
                                             'YELLOW_FINGERS_1',
                                             'YELLOW_FINGERS_2', 'ANXIETY_1...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2023-12-06 19:45:39,560:INFO:Creating final display dataframe.
2023-12-06 19:45:39,715:INFO:Setup _display_container:                     Description             Value
0                    Session id              8076
1                        Target       LUNG_CANCER
2                   Target type            Binary
3                Target mapping        1: 0, 2: 1
4           Original data shape         (540, 30)
5        Transformed data shape         (540, 30)
6   Transformed train set shape         (378, 30)
7    Transformed test set shape         (162, 30)
8              Numeric features                29
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              73d7
2023-12-06 19:45:39,854:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-06 19:45:39,860:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-06 19:45:39,980:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-06 19:45:39,980:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-06 19:45:39,980:INFO:setup() successfully completed in 1.91s...............
2023-12-06 19:46:36,490:INFO:Initializing compare_models()
2023-12-06 19:46:36,490:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2023-12-06 19:46:36,490:INFO:Checking exceptions
2023-12-06 19:46:36,500:INFO:Preparing display monitor
2023-12-06 19:46:36,546:INFO:Initializing Logistic Regression
2023-12-06 19:46:36,547:INFO:Total runtime is 1.6999244689941406e-05 minutes
2023-12-06 19:46:36,555:INFO:SubProcess create_model() called ==================================
2023-12-06 19:46:36,556:INFO:Initializing create_model()
2023-12-06 19:46:36,556:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A610BB050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-06 19:46:36,556:INFO:Checking exceptions
2023-12-06 19:46:36,557:INFO:Importing libraries
2023-12-06 19:46:36,557:INFO:Copying training dataset
2023-12-06 19:46:36,561:INFO:Defining folds
2023-12-06 19:46:36,561:INFO:Declaring metric variables
2023-12-06 19:46:36,570:INFO:Importing untrained model
2023-12-06 19:46:36,577:INFO:Logistic Regression Imported successfully
2023-12-06 19:46:36,588:INFO:Starting cross validation
2023-12-06 19:46:36,590:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-06 19:46:45,496:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:45,501:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:45,510:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:45,821:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:45,830:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:45,834:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:45,940:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:45,948:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:45,951:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:45,954:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:45,954:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:45,962:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:46,035:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:46,079:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:46,087:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:46,094:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:46,120:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:46,125:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:46,171:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:46,171:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:46,181:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:46,300:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:46,324:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:46,331:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:46,393:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:46,393:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:46,395:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:46,400:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:46,403:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:46,403:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:46,423:INFO:Calculating mean and std
2023-12-06 19:46:46,430:INFO:Creating metrics dataframe
2023-12-06 19:46:46,440:INFO:Uploading results into container
2023-12-06 19:46:46,440:INFO:Uploading model into container now
2023-12-06 19:46:46,450:INFO:_master_model_container: 1
2023-12-06 19:46:46,450:INFO:_display_container: 2
2023-12-06 19:46:46,450:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8076, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-12-06 19:46:46,450:INFO:create_model() successfully completed......................................
2023-12-06 19:46:47,180:INFO:SubProcess create_model() end ==================================
2023-12-06 19:46:47,180:INFO:Creating metrics dataframe
2023-12-06 19:46:47,197:INFO:Initializing K Neighbors Classifier
2023-12-06 19:46:47,197:INFO:Total runtime is 0.17752265532811484 minutes
2023-12-06 19:46:47,200:INFO:SubProcess create_model() called ==================================
2023-12-06 19:46:47,200:INFO:Initializing create_model()
2023-12-06 19:46:47,200:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A610BB050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-06 19:46:47,200:INFO:Checking exceptions
2023-12-06 19:46:47,200:INFO:Importing libraries
2023-12-06 19:46:47,200:INFO:Copying training dataset
2023-12-06 19:46:47,210:INFO:Defining folds
2023-12-06 19:46:47,210:INFO:Declaring metric variables
2023-12-06 19:46:47,216:INFO:Importing untrained model
2023-12-06 19:46:47,222:INFO:K Neighbors Classifier Imported successfully
2023-12-06 19:46:47,236:INFO:Starting cross validation
2023-12-06 19:46:47,237:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-06 19:46:47,551:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,551:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,551:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,551:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,551:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,551:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,555:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,555:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,555:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,555:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,555:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,555:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,555:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,560:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,561:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,561:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,561:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,561:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,566:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,566:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,566:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,566:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,566:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,570:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,613:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,620:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,623:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,623:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,629:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,630:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,644:INFO:Calculating mean and std
2023-12-06 19:46:47,645:INFO:Creating metrics dataframe
2023-12-06 19:46:47,651:INFO:Uploading results into container
2023-12-06 19:46:47,651:INFO:Uploading model into container now
2023-12-06 19:46:47,651:INFO:_master_model_container: 2
2023-12-06 19:46:47,651:INFO:_display_container: 2
2023-12-06 19:46:47,651:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-12-06 19:46:47,651:INFO:create_model() successfully completed......................................
2023-12-06 19:46:47,740:INFO:SubProcess create_model() end ==================================
2023-12-06 19:46:47,740:INFO:Creating metrics dataframe
2023-12-06 19:46:47,750:INFO:Initializing Naive Bayes
2023-12-06 19:46:47,750:INFO:Total runtime is 0.18673702081044516 minutes
2023-12-06 19:46:47,763:INFO:SubProcess create_model() called ==================================
2023-12-06 19:46:47,764:INFO:Initializing create_model()
2023-12-06 19:46:47,764:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A610BB050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-06 19:46:47,764:INFO:Checking exceptions
2023-12-06 19:46:47,764:INFO:Importing libraries
2023-12-06 19:46:47,764:INFO:Copying training dataset
2023-12-06 19:46:47,770:INFO:Defining folds
2023-12-06 19:46:47,770:INFO:Declaring metric variables
2023-12-06 19:46:47,775:INFO:Importing untrained model
2023-12-06 19:46:47,783:INFO:Naive Bayes Imported successfully
2023-12-06 19:46:47,790:INFO:Starting cross validation
2023-12-06 19:46:47,794:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-06 19:46:47,889:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,890:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,890:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,894:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,898:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,900:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,901:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,901:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,905:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,905:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,907:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,907:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,908:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,910:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,910:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,915:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,915:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,920:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,925:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,930:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,930:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,930:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,935:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,935:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,957:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,960:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,961:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,965:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,966:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,968:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:47,977:INFO:Calculating mean and std
2023-12-06 19:46:47,979:INFO:Creating metrics dataframe
2023-12-06 19:46:47,983:INFO:Uploading results into container
2023-12-06 19:46:47,983:INFO:Uploading model into container now
2023-12-06 19:46:47,983:INFO:_master_model_container: 3
2023-12-06 19:46:47,983:INFO:_display_container: 2
2023-12-06 19:46:47,983:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-12-06 19:46:47,983:INFO:create_model() successfully completed......................................
2023-12-06 19:46:48,070:INFO:SubProcess create_model() end ==================================
2023-12-06 19:46:48,070:INFO:Creating metrics dataframe
2023-12-06 19:46:48,088:INFO:Initializing Decision Tree Classifier
2023-12-06 19:46:48,088:INFO:Total runtime is 0.19237320025761923 minutes
2023-12-06 19:46:48,095:INFO:SubProcess create_model() called ==================================
2023-12-06 19:46:48,096:INFO:Initializing create_model()
2023-12-06 19:46:48,096:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A610BB050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-06 19:46:48,097:INFO:Checking exceptions
2023-12-06 19:46:48,097:INFO:Importing libraries
2023-12-06 19:46:48,097:INFO:Copying training dataset
2023-12-06 19:46:48,100:INFO:Defining folds
2023-12-06 19:46:48,100:INFO:Declaring metric variables
2023-12-06 19:46:48,100:INFO:Importing untrained model
2023-12-06 19:46:48,118:INFO:Decision Tree Classifier Imported successfully
2023-12-06 19:46:48,135:INFO:Starting cross validation
2023-12-06 19:46:48,137:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-06 19:46:48,240:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,240:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,240:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,245:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,245:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,250:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,250:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,250:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,250:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,250:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,255:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,255:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,255:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,255:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,258:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,258:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,258:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,262:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,262:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,262:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,268:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,268:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,270:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,270:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,310:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,316:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,316:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,320:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,320:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,341:INFO:Calculating mean and std
2023-12-06 19:46:48,341:INFO:Creating metrics dataframe
2023-12-06 19:46:48,347:INFO:Uploading results into container
2023-12-06 19:46:48,350:INFO:Uploading model into container now
2023-12-06 19:46:48,350:INFO:_master_model_container: 4
2023-12-06 19:46:48,350:INFO:_display_container: 2
2023-12-06 19:46:48,350:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8076, splitter='best')
2023-12-06 19:46:48,350:INFO:create_model() successfully completed......................................
2023-12-06 19:46:48,440:INFO:SubProcess create_model() end ==================================
2023-12-06 19:46:48,440:INFO:Creating metrics dataframe
2023-12-06 19:46:48,461:INFO:Initializing SVM - Linear Kernel
2023-12-06 19:46:48,462:INFO:Total runtime is 0.1986106276512146 minutes
2023-12-06 19:46:48,470:INFO:SubProcess create_model() called ==================================
2023-12-06 19:46:48,470:INFO:Initializing create_model()
2023-12-06 19:46:48,470:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A610BB050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-06 19:46:48,470:INFO:Checking exceptions
2023-12-06 19:46:48,470:INFO:Importing libraries
2023-12-06 19:46:48,470:INFO:Copying training dataset
2023-12-06 19:46:48,470:INFO:Defining folds
2023-12-06 19:46:48,470:INFO:Declaring metric variables
2023-12-06 19:46:48,486:INFO:Importing untrained model
2023-12-06 19:46:48,494:INFO:SVM - Linear Kernel Imported successfully
2023-12-06 19:46:48,510:INFO:Starting cross validation
2023-12-06 19:46:48,511:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-06 19:46:48,601:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-06 19:46:48,601:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-06 19:46:48,601:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-06 19:46:48,601:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a cus2023-12-06 19:46:48,608:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

ct_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-06 19:46:48,608:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,610:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,610:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,615:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,615:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,615:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-06 19:46:48,616:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,616:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,618:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,620:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-06 19:46:48,620:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,620:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,620:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,620:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,620:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,620:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,620:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-06 19:46:48,625:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-06 19:46:48,625:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,630:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,630:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,632:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,632:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,640:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,640:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,670:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-06 19:46:48,672:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,672:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-06 19:46:48,676:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,676:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,681:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,683:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:48,701:INFO:Calculating mean and std
2023-12-06 19:46:48,701:INFO:Creating metrics dataframe
2023-12-06 19:46:48,701:INFO:Uploading results into container
2023-12-06 19:46:48,701:INFO:Uploading model into container now
2023-12-06 19:46:48,701:INFO:_master_model_container: 5
2023-12-06 19:46:48,701:INFO:_display_container: 2
2023-12-06 19:46:48,701:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=8076, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2023-12-06 19:46:48,710:INFO:create_model() successfully completed......................................
2023-12-06 19:46:48,800:INFO:SubProcess create_model() end ==================================
2023-12-06 19:46:48,800:INFO:Creating metrics dataframe
2023-12-06 19:46:48,816:INFO:Initializing Ridge Classifier
2023-12-06 19:46:48,816:INFO:Total runtime is 0.20449904203414918 minutes
2023-12-06 19:46:48,820:INFO:SubProcess create_model() called ==================================
2023-12-06 19:46:48,820:INFO:Initializing create_model()
2023-12-06 19:46:48,820:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A610BB050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-06 19:46:48,820:INFO:Checking exceptions
2023-12-06 19:46:48,820:INFO:Importing libraries
2023-12-06 19:46:48,820:INFO:Copying training dataset
2023-12-06 19:46:48,820:INFO:Defining folds
2023-12-06 19:46:48,820:INFO:Declaring metric variables
2023-12-06 19:46:48,834:INFO:Importing untrained model
2023-12-06 19:46:48,840:INFO:Ridge Classifier Imported successfully
2023-12-06 19:46:48,854:INFO:Starting cross validation
2023-12-06 19:46:48,854:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-06 19:46:49,000:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-06 19:46:49,000:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-06 19:46:49,000:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-06 19:46:49,000:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-06 19:46:49,000:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,005:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,005:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,005:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,006:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-06 19:46:49,006:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-06 19:46:49,010:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,010:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,011:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,011:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,011:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,011:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,011:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-06 19:46:49,017:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,017:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,017:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,020:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,020:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,020:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,020:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,020:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,025:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,027:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,035:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,038:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,073:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-06 19:46:49,074:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,074:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,074:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,080:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,080:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,085:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,100:INFO:Calculating mean and std
2023-12-06 19:46:49,100:INFO:Creating metrics dataframe
2023-12-06 19:46:49,100:INFO:Uploading results into container
2023-12-06 19:46:49,100:INFO:Uploading model into container now
2023-12-06 19:46:49,100:INFO:_master_model_container: 6
2023-12-06 19:46:49,100:INFO:_display_container: 2
2023-12-06 19:46:49,100:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=8076, solver='auto',
                tol=0.0001)
2023-12-06 19:46:49,100:INFO:create_model() successfully completed......................................
2023-12-06 19:46:49,208:INFO:SubProcess create_model() end ==================================
2023-12-06 19:46:49,208:INFO:Creating metrics dataframe
2023-12-06 19:46:49,222:INFO:Initializing Random Forest Classifier
2023-12-06 19:46:49,222:INFO:Total runtime is 0.2112650712331136 minutes
2023-12-06 19:46:49,232:INFO:SubProcess create_model() called ==================================
2023-12-06 19:46:49,232:INFO:Initializing create_model()
2023-12-06 19:46:49,232:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A610BB050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-06 19:46:49,232:INFO:Checking exceptions
2023-12-06 19:46:49,232:INFO:Importing libraries
2023-12-06 19:46:49,232:INFO:Copying training dataset
2023-12-06 19:46:49,232:INFO:Defining folds
2023-12-06 19:46:49,232:INFO:Declaring metric variables
2023-12-06 19:46:49,246:INFO:Importing untrained model
2023-12-06 19:46:49,252:INFO:Random Forest Classifier Imported successfully
2023-12-06 19:46:49,265:INFO:Starting cross validation
2023-12-06 19:46:49,268:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-06 19:46:49,890:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,895:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,897:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,903:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,903:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,914:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,915:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,920:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,921:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,923:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,925:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,927:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,927:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,927:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,933:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,934:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,938:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,940:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,954:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,958:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:49,963:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,151:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,158:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,160:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,370:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,373:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,381:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,384:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,391:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,398:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,415:INFO:Calculating mean and std
2023-12-06 19:46:50,415:INFO:Creating metrics dataframe
2023-12-06 19:46:50,420:INFO:Uploading results into container
2023-12-06 19:46:50,427:INFO:Uploading model into container now
2023-12-06 19:46:50,427:INFO:_master_model_container: 7
2023-12-06 19:46:50,427:INFO:_display_container: 2
2023-12-06 19:46:50,428:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=8076, verbose=0, warm_start=False)
2023-12-06 19:46:50,429:INFO:create_model() successfully completed......................................
2023-12-06 19:46:50,550:INFO:SubProcess create_model() end ==================================
2023-12-06 19:46:50,550:INFO:Creating metrics dataframe
2023-12-06 19:46:50,570:INFO:Initializing Quadratic Discriminant Analysis
2023-12-06 19:46:50,570:INFO:Total runtime is 0.23373633225758872 minutes
2023-12-06 19:46:50,585:INFO:SubProcess create_model() called ==================================
2023-12-06 19:46:50,586:INFO:Initializing create_model()
2023-12-06 19:46:50,586:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A610BB050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-06 19:46:50,587:INFO:Checking exceptions
2023-12-06 19:46:50,588:INFO:Importing libraries
2023-12-06 19:46:50,588:INFO:Copying training dataset
2023-12-06 19:46:50,596:INFO:Defining folds
2023-12-06 19:46:50,596:INFO:Declaring metric variables
2023-12-06 19:46:50,600:INFO:Importing untrained model
2023-12-06 19:46:50,611:INFO:Quadratic Discriminant Analysis Imported successfully
2023-12-06 19:46:50,625:INFO:Starting cross validation
2023-12-06 19:46:50,630:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-06 19:46:50,727:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-06 19:46:50,728:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-06 19:46:50,728:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-06 19:46:50,730:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-06 19:46:50,731:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-06 19:46:50,732:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-06 19:46:50,743:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-06 19:46:50,768:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,768:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,770:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,776:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,776:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,776:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,777:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,777:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,778:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-06 19:46:50,780:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,784:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,784:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,785:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,787:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,787:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,793:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,793:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,794:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,797:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,801:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,805:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,806:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,811:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,820:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,825:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-06 19:46:50,834:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-06 19:46:50,841:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,852:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,852:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,852:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,852:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,852:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:50,873:INFO:Calculating mean and std
2023-12-06 19:46:50,873:INFO:Creating metrics dataframe
2023-12-06 19:46:50,880:INFO:Uploading results into container
2023-12-06 19:46:50,880:INFO:Uploading model into container now
2023-12-06 19:46:50,880:INFO:_master_model_container: 8
2023-12-06 19:46:50,880:INFO:_display_container: 2
2023-12-06 19:46:50,880:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2023-12-06 19:46:50,880:INFO:create_model() successfully completed......................................
2023-12-06 19:46:50,962:INFO:SubProcess create_model() end ==================================
2023-12-06 19:46:50,962:INFO:Creating metrics dataframe
2023-12-06 19:46:50,980:INFO:Initializing Ada Boost Classifier
2023-12-06 19:46:50,980:INFO:Total runtime is 0.2405734697977702 minutes
2023-12-06 19:46:50,980:INFO:SubProcess create_model() called ==================================
2023-12-06 19:46:50,980:INFO:Initializing create_model()
2023-12-06 19:46:50,980:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A610BB050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-06 19:46:50,980:INFO:Checking exceptions
2023-12-06 19:46:50,980:INFO:Importing libraries
2023-12-06 19:46:50,980:INFO:Copying training dataset
2023-12-06 19:46:50,990:INFO:Defining folds
2023-12-06 19:46:50,990:INFO:Declaring metric variables
2023-12-06 19:46:50,997:INFO:Importing untrained model
2023-12-06 19:46:51,002:INFO:Ada Boost Classifier Imported successfully
2023-12-06 19:46:51,016:INFO:Starting cross validation
2023-12-06 19:46:51,018:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-06 19:46:51,458:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,463:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,464:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,466:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,468:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,471:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,473:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,475:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,476:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,478:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,479:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,483:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,594:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,600:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,600:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,603:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,603:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,603:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,629:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,630:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,630:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,634:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,634:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,640:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,768:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,772:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,775:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,776:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,782:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,788:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:51,801:INFO:Calculating mean and std
2023-12-06 19:46:51,804:INFO:Creating metrics dataframe
2023-12-06 19:46:51,815:INFO:Uploading results into container
2023-12-06 19:46:51,818:INFO:Uploading model into container now
2023-12-06 19:46:51,818:INFO:_master_model_container: 9
2023-12-06 19:46:51,819:INFO:_display_container: 2
2023-12-06 19:46:51,819:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=8076)
2023-12-06 19:46:51,819:INFO:create_model() successfully completed......................................
2023-12-06 19:46:52,055:INFO:SubProcess create_model() end ==================================
2023-12-06 19:46:52,055:INFO:Creating metrics dataframe
2023-12-06 19:46:52,100:INFO:Initializing Gradient Boosting Classifier
2023-12-06 19:46:52,100:INFO:Total runtime is 0.2592333793640137 minutes
2023-12-06 19:46:52,104:INFO:SubProcess create_model() called ==================================
2023-12-06 19:46:52,104:INFO:Initializing create_model()
2023-12-06 19:46:52,104:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A610BB050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-06 19:46:52,104:INFO:Checking exceptions
2023-12-06 19:46:52,110:INFO:Importing libraries
2023-12-06 19:46:52,110:INFO:Copying training dataset
2023-12-06 19:46:52,120:INFO:Defining folds
2023-12-06 19:46:52,120:INFO:Declaring metric variables
2023-12-06 19:46:52,130:INFO:Importing untrained model
2023-12-06 19:46:52,140:INFO:Gradient Boosting Classifier Imported successfully
2023-12-06 19:46:52,151:INFO:Starting cross validation
2023-12-06 19:46:52,151:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-06 19:46:52,730:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:52,740:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:52,740:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:52,745:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:52,762:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:52,770:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:52,770:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:52,775:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:52,775:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:52,775:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:52,788:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:52,812:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:52,920:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:52,931:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:52,934:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:52,934:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:52,934:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:52,940:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:52,940:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:52,947:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:52,950:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:52,990:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:52,995:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,000:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,075:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,080:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,083:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,100:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,105:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,108:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,118:INFO:Calculating mean and std
2023-12-06 19:46:53,120:INFO:Creating metrics dataframe
2023-12-06 19:46:53,120:INFO:Uploading results into container
2023-12-06 19:46:53,120:INFO:Uploading model into container now
2023-12-06 19:46:53,120:INFO:_master_model_container: 10
2023-12-06 19:46:53,120:INFO:_display_container: 2
2023-12-06 19:46:53,120:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=8076, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-12-06 19:46:53,120:INFO:create_model() successfully completed......................................
2023-12-06 19:46:53,200:INFO:SubProcess create_model() end ==================================
2023-12-06 19:46:53,200:INFO:Creating metrics dataframe
2023-12-06 19:46:53,220:INFO:Initializing Linear Discriminant Analysis
2023-12-06 19:46:53,220:INFO:Total runtime is 0.27790337800979614 minutes
2023-12-06 19:46:53,230:INFO:SubProcess create_model() called ==================================
2023-12-06 19:46:53,230:INFO:Initializing create_model()
2023-12-06 19:46:53,230:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A610BB050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-06 19:46:53,230:INFO:Checking exceptions
2023-12-06 19:46:53,230:INFO:Importing libraries
2023-12-06 19:46:53,230:INFO:Copying training dataset
2023-12-06 19:46:53,240:INFO:Defining folds
2023-12-06 19:46:53,240:INFO:Declaring metric variables
2023-12-06 19:46:53,250:INFO:Importing untrained model
2023-12-06 19:46:53,250:INFO:Linear Discriminant Analysis Imported successfully
2023-12-06 19:46:53,270:INFO:Starting cross validation
2023-12-06 19:46:53,272:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-06 19:46:53,400:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,400:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,405:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,405:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,405:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,405:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,405:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,410:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,410:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,410:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,410:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,416:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,416:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,416:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,416:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,420:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,420:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,420:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,420:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,420:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,426:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,430:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,436:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,440:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,470:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,477:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,477:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,483:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,484:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,488:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:53,498:INFO:Calculating mean and std
2023-12-06 19:46:53,500:INFO:Creating metrics dataframe
2023-12-06 19:46:53,502:INFO:Uploading results into container
2023-12-06 19:46:53,502:INFO:Uploading model into container now
2023-12-06 19:46:53,502:INFO:_master_model_container: 11
2023-12-06 19:46:53,502:INFO:_display_container: 2
2023-12-06 19:46:53,502:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2023-12-06 19:46:53,502:INFO:create_model() successfully completed......................................
2023-12-06 19:46:53,604:INFO:SubProcess create_model() end ==================================
2023-12-06 19:46:53,604:INFO:Creating metrics dataframe
2023-12-06 19:46:53,621:INFO:Initializing Extra Trees Classifier
2023-12-06 19:46:53,621:INFO:Total runtime is 0.28459418217341104 minutes
2023-12-06 19:46:53,635:INFO:SubProcess create_model() called ==================================
2023-12-06 19:46:53,635:INFO:Initializing create_model()
2023-12-06 19:46:53,635:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A610BB050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-06 19:46:53,635:INFO:Checking exceptions
2023-12-06 19:46:53,635:INFO:Importing libraries
2023-12-06 19:46:53,635:INFO:Copying training dataset
2023-12-06 19:46:53,640:INFO:Defining folds
2023-12-06 19:46:53,640:INFO:Declaring metric variables
2023-12-06 19:46:53,651:INFO:Importing untrained model
2023-12-06 19:46:53,656:INFO:Extra Trees Classifier Imported successfully
2023-12-06 19:46:53,672:INFO:Starting cross validation
2023-12-06 19:46:53,674:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-06 19:46:54,195:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,200:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,200:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,200:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,204:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,204:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,204:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,204:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,210:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,210:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,213:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,213:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,213:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,216:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,218:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,220:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,223:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,270:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,270:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,275:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,295:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,300:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,305:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,534:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,534:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,543:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,554:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,557:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,562:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:54,581:INFO:Calculating mean and std
2023-12-06 19:46:54,584:INFO:Creating metrics dataframe
2023-12-06 19:46:54,589:INFO:Uploading results into container
2023-12-06 19:46:54,589:INFO:Uploading model into container now
2023-12-06 19:46:54,590:INFO:_master_model_container: 12
2023-12-06 19:46:54,590:INFO:_display_container: 2
2023-12-06 19:46:54,591:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False)
2023-12-06 19:46:54,591:INFO:create_model() successfully completed......................................
2023-12-06 19:46:54,680:INFO:SubProcess create_model() end ==================================
2023-12-06 19:46:54,680:INFO:Creating metrics dataframe
2023-12-06 19:46:54,695:INFO:Initializing Light Gradient Boosting Machine
2023-12-06 19:46:54,695:INFO:Total runtime is 0.30248501698176067 minutes
2023-12-06 19:46:54,703:INFO:SubProcess create_model() called ==================================
2023-12-06 19:46:54,703:INFO:Initializing create_model()
2023-12-06 19:46:54,703:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A610BB050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-06 19:46:54,703:INFO:Checking exceptions
2023-12-06 19:46:54,703:INFO:Importing libraries
2023-12-06 19:46:54,703:INFO:Copying training dataset
2023-12-06 19:46:54,710:INFO:Defining folds
2023-12-06 19:46:54,710:INFO:Declaring metric variables
2023-12-06 19:46:54,720:INFO:Importing untrained model
2023-12-06 19:46:54,727:INFO:Light Gradient Boosting Machine Imported successfully
2023-12-06 19:46:54,740:INFO:Starting cross validation
2023-12-06 19:46:54,742:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-06 19:46:55,170:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,174:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,174:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,180:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,184:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,186:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,246:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,250:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,256:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,267:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,270:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,270:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,277:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,281:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,287:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,290:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,295:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,301:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,320:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,320:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,330:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,337:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,341:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,346:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,486:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,486:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,490:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,493:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,493:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,500:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,514:INFO:Calculating mean and std
2023-12-06 19:46:55,517:INFO:Creating metrics dataframe
2023-12-06 19:46:55,523:INFO:Uploading results into container
2023-12-06 19:46:55,524:INFO:Uploading model into container now
2023-12-06 19:46:55,525:INFO:_master_model_container: 13
2023-12-06 19:46:55,525:INFO:_display_container: 2
2023-12-06 19:46:55,526:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=8076, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2023-12-06 19:46:55,527:INFO:create_model() successfully completed......................................
2023-12-06 19:46:55,630:INFO:SubProcess create_model() end ==================================
2023-12-06 19:46:55,630:INFO:Creating metrics dataframe
2023-12-06 19:46:55,651:INFO:Initializing Dummy Classifier
2023-12-06 19:46:55,651:INFO:Total runtime is 0.3184285481770833 minutes
2023-12-06 19:46:55,651:INFO:SubProcess create_model() called ==================================
2023-12-06 19:46:55,660:INFO:Initializing create_model()
2023-12-06 19:46:55,660:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023A610BB050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-06 19:46:55,660:INFO:Checking exceptions
2023-12-06 19:46:55,660:INFO:Importing libraries
2023-12-06 19:46:55,660:INFO:Copying training dataset
2023-12-06 19:46:55,667:INFO:Defining folds
2023-12-06 19:46:55,667:INFO:Declaring metric variables
2023-12-06 19:46:55,675:INFO:Importing untrained model
2023-12-06 19:46:55,680:INFO:Dummy Classifier Imported successfully
2023-12-06 19:46:55,694:INFO:Starting cross validation
2023-12-06 19:46:55,694:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-06 19:46:55,772:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,772:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,777:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,778:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,778:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,781:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-06 19:46:55,782:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-06 19:46:55,783:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,783:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,783:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,785:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,785:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,785:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-06 19:46:55,790:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,790:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,791:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,792:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-06 19:46:55,794:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-06 19:46:55,795:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,797:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,800:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,800:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,802:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,802:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,802:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,808:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-06 19:46:55,808:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-06 19:46:55,810:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,811:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,811:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,811:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-06 19:46:55,811:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,838:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,840:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,841:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,842:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-06 19:46:55,843:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,843:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,843:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-06 19:46:55,850:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-06 19:46:55,859:INFO:Calculating mean and std
2023-12-06 19:46:55,860:INFO:Creating metrics dataframe
2023-12-06 19:46:55,860:INFO:Uploading results into container
2023-12-06 19:46:55,860:INFO:Uploading model into container now
2023-12-06 19:46:55,860:INFO:_master_model_container: 14
2023-12-06 19:46:55,860:INFO:_display_container: 2
2023-12-06 19:46:55,860:INFO:DummyClassifier(constant=None, random_state=8076, strategy='prior')
2023-12-06 19:46:55,860:INFO:create_model() successfully completed......................................
2023-12-06 19:46:55,950:INFO:SubProcess create_model() end ==================================
2023-12-06 19:46:55,950:INFO:Creating metrics dataframe
2023-12-06 19:46:55,982:INFO:Initializing create_model()
2023-12-06 19:46:55,982:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-06 19:46:55,982:INFO:Checking exceptions
2023-12-06 19:46:55,982:INFO:Importing libraries
2023-12-06 19:46:55,990:INFO:Copying training dataset
2023-12-06 19:46:55,990:INFO:Defining folds
2023-12-06 19:46:55,990:INFO:Declaring metric variables
2023-12-06 19:46:55,990:INFO:Importing untrained model
2023-12-06 19:46:55,990:INFO:Declaring custom model
2023-12-06 19:46:55,995:INFO:Extra Trees Classifier Imported successfully
2023-12-06 19:46:55,999:INFO:Cross validation set to False
2023-12-06 19:46:55,999:INFO:Fitting Model
2023-12-06 19:46:56,276:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False)
2023-12-06 19:46:56,277:INFO:create_model() successfully completed......................................
2023-12-06 19:46:56,433:INFO:_master_model_container: 14
2023-12-06 19:46:56,433:INFO:_display_container: 2
2023-12-06 19:46:56,434:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False)
2023-12-06 19:46:56,434:INFO:compare_models() successfully completed......................................
2023-12-06 19:47:53,758:INFO:Initializing evaluate_model()
2023-12-06 19:47:53,760:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2023-12-06 19:47:53,782:INFO:Initializing plot_model()
2023-12-06 19:47:53,782:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 19:47:53,782:INFO:Checking exceptions
2023-12-06 19:47:53,821:INFO:Preloading libraries
2023-12-06 19:47:53,840:INFO:Copying training dataset
2023-12-06 19:47:53,841:INFO:Plot type: pipeline
2023-12-06 19:47:54,282:INFO:Visual Rendered Successfully
2023-12-06 19:47:54,380:INFO:plot_model() successfully completed......................................
2023-12-06 19:48:20,899:INFO:Initializing plot_model()
2023-12-06 19:48:20,899:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=confusion_matrix, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 19:48:20,900:INFO:Checking exceptions
2023-12-06 19:48:20,933:INFO:Preloading libraries
2023-12-06 19:48:20,945:INFO:Copying training dataset
2023-12-06 19:48:20,945:INFO:Plot type: confusion_matrix
2023-12-06 19:48:21,071:INFO:Fitting Model
2023-12-06 19:48:21,071:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but ExtraTreesClassifier was fitted with feature names
  warnings.warn(

2023-12-06 19:48:21,071:INFO:Scoring test/hold-out set
2023-12-06 19:48:21,289:INFO:Visual Rendered Successfully
2023-12-06 19:48:21,365:INFO:plot_model() successfully completed......................................
2023-12-06 19:48:26,717:INFO:Initializing plot_model()
2023-12-06 19:48:26,717:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=auc, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 19:48:26,717:INFO:Checking exceptions
2023-12-06 19:48:26,751:INFO:Preloading libraries
2023-12-06 19:48:26,763:INFO:Copying training dataset
2023-12-06 19:48:26,763:INFO:Plot type: auc
2023-12-06 19:48:26,881:INFO:Fitting Model
2023-12-06 19:48:26,881:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but ExtraTreesClassifier was fitted with feature names
  warnings.warn(

2023-12-06 19:48:26,881:INFO:Scoring test/hold-out set
2023-12-06 19:48:27,226:INFO:Visual Rendered Successfully
2023-12-06 19:48:27,303:INFO:plot_model() successfully completed......................................
2023-12-06 19:48:31,069:INFO:Initializing plot_model()
2023-12-06 19:48:31,069:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=parameter, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 19:48:31,070:INFO:Checking exceptions
2023-12-06 19:48:31,104:INFO:Preloading libraries
2023-12-06 19:48:31,116:INFO:Copying training dataset
2023-12-06 19:48:31,116:INFO:Plot type: parameter
2023-12-06 19:48:31,121:INFO:Visual Rendered Successfully
2023-12-06 19:48:31,195:INFO:plot_model() successfully completed......................................
2023-12-06 19:48:43,997:INFO:Initializing plot_model()
2023-12-06 19:48:43,998:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=class_report, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 19:48:43,998:INFO:Checking exceptions
2023-12-06 19:48:44,032:INFO:Preloading libraries
2023-12-06 19:48:44,044:INFO:Copying training dataset
2023-12-06 19:48:44,044:INFO:Plot type: class_report
2023-12-06 19:48:44,162:INFO:Fitting Model
2023-12-06 19:48:44,162:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but ExtraTreesClassifier was fitted with feature names
  warnings.warn(

2023-12-06 19:48:44,162:INFO:Scoring test/hold-out set
2023-12-06 19:48:44,488:INFO:Visual Rendered Successfully
2023-12-06 19:48:44,570:INFO:plot_model() successfully completed......................................
2023-12-06 19:48:52,611:INFO:Initializing plot_model()
2023-12-06 19:48:52,611:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=feature, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 19:48:52,612:INFO:Checking exceptions
2023-12-06 19:48:52,645:INFO:Preloading libraries
2023-12-06 19:48:52,657:INFO:Copying training dataset
2023-12-06 19:48:52,657:INFO:Plot type: feature
2023-12-06 19:48:52,657:WARNING:No coef_ found. Trying feature_importances_
2023-12-06 19:48:52,964:INFO:Visual Rendered Successfully
2023-12-06 19:48:53,078:INFO:plot_model() successfully completed......................................
2023-12-06 19:48:58,120:INFO:Initializing plot_model()
2023-12-06 19:48:58,120:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 19:48:58,121:INFO:Checking exceptions
2023-12-06 19:48:58,155:INFO:Preloading libraries
2023-12-06 19:48:58,168:INFO:Copying training dataset
2023-12-06 19:48:58,168:INFO:Plot type: pipeline
2023-12-06 19:48:58,383:INFO:Visual Rendered Successfully
2023-12-06 19:48:58,498:INFO:plot_model() successfully completed......................................
2023-12-06 19:49:55,694:INFO:Initializing plot_model()
2023-12-06 19:49:55,694:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=boundary, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 19:49:55,695:INFO:Checking exceptions
2023-12-06 19:49:55,764:INFO:Preloading libraries
2023-12-06 19:49:55,781:INFO:Copying training dataset
2023-12-06 19:49:55,781:INFO:Plot type: boundary
2023-12-06 19:49:55,853:INFO:Fitting StandardScaler()
2023-12-06 19:49:55,860:INFO:Fitting PCA()
2023-12-06 19:49:55,988:INFO:Fitting Model
2023-12-06 19:49:58,155:INFO:Visual Rendered Successfully
2023-12-06 19:49:58,289:INFO:plot_model() successfully completed......................................
2023-12-06 19:50:06,823:INFO:Initializing plot_model()
2023-12-06 19:50:06,823:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=lift, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 19:50:06,823:INFO:Checking exceptions
2023-12-06 19:50:06,856:INFO:Preloading libraries
2023-12-06 19:50:06,868:INFO:Copying training dataset
2023-12-06 19:50:06,868:INFO:Plot type: lift
2023-12-06 19:50:06,869:INFO:Generating predictions / predict_proba on X_test
2023-12-06 19:50:07,223:INFO:Visual Rendered Successfully
2023-12-06 19:50:07,303:INFO:plot_model() successfully completed......................................
2023-12-06 19:50:10,380:INFO:Initializing plot_model()
2023-12-06 19:50:10,380:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=gain, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 19:50:10,381:INFO:Checking exceptions
2023-12-06 19:50:10,416:INFO:Preloading libraries
2023-12-06 19:50:10,428:INFO:Copying training dataset
2023-12-06 19:50:10,428:INFO:Plot type: gain
2023-12-06 19:50:10,428:INFO:Generating predictions / predict_proba on X_test
2023-12-06 19:50:10,779:INFO:Visual Rendered Successfully
2023-12-06 19:50:10,850:INFO:plot_model() successfully completed......................................
2023-12-06 19:50:13,355:INFO:Initializing plot_model()
2023-12-06 19:50:13,356:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=tree, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 19:50:13,356:INFO:Checking exceptions
2023-12-06 19:50:13,391:INFO:Preloading libraries
2023-12-06 19:50:13,402:INFO:Copying training dataset
2023-12-06 19:50:13,402:INFO:Plot type: tree
2023-12-06 19:50:14,894:INFO:Plotting decision trees
2023-12-06 19:50:14,926:INFO:Plotting tree 0
2023-12-06 19:50:53,889:INFO:Initializing plot_model()
2023-12-06 19:50:53,889:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=learning, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 19:50:53,889:INFO:Checking exceptions
2023-12-06 19:50:54,061:INFO:Preloading libraries
2023-12-06 19:50:54,094:INFO:Copying training dataset
2023-12-06 19:50:54,094:INFO:Plot type: learning
2023-12-06 19:50:54,288:INFO:Fitting Model
2023-12-06 19:51:04,076:INFO:Visual Rendered Successfully
2023-12-06 19:51:04,871:INFO:plot_model() successfully completed......................................
2023-12-06 19:51:04,896:INFO:Initializing evaluate_model()
2023-12-06 19:51:04,896:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2023-12-06 19:51:04,910:INFO:Initializing plot_model()
2023-12-06 19:51:04,911:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 19:51:04,911:INFO:Checking exceptions
2023-12-06 19:51:04,944:INFO:Preloading libraries
2023-12-06 19:51:04,959:INFO:Copying training dataset
2023-12-06 19:51:04,960:INFO:Plot type: pipeline
2023-12-06 19:51:05,190:INFO:Visual Rendered Successfully
2023-12-06 19:51:05,541:INFO:plot_model() successfully completed......................................
2023-12-06 19:51:08,813:INFO:Initializing plot_model()
2023-12-06 19:51:08,813:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=auc, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 19:51:08,814:INFO:Checking exceptions
2023-12-06 19:51:08,861:INFO:Preloading libraries
2023-12-06 19:51:08,881:INFO:Copying training dataset
2023-12-06 19:51:08,881:INFO:Plot type: auc
2023-12-06 19:51:09,073:INFO:Fitting Model
2023-12-06 19:51:09,074:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but ExtraTreesClassifier was fitted with feature names
  warnings.warn(

2023-12-06 19:51:09,075:INFO:Scoring test/hold-out set
2023-12-06 19:51:09,509:INFO:Visual Rendered Successfully
2023-12-06 19:51:09,729:INFO:plot_model() successfully completed......................................
2023-12-06 19:51:11,360:INFO:Initializing plot_model()
2023-12-06 19:51:11,360:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=tree, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 19:51:11,360:INFO:Checking exceptions
2023-12-06 19:51:11,393:INFO:Preloading libraries
2023-12-06 19:51:11,407:INFO:Copying training dataset
2023-12-06 19:51:11,407:INFO:Plot type: tree
2023-12-06 19:51:12,954:INFO:Plotting decision trees
2023-12-06 19:51:12,989:INFO:Plotting tree 0
2023-12-06 19:51:47,357:INFO:Initializing evaluate_model()
2023-12-06 19:51:47,367:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2023-12-06 19:51:47,521:INFO:Initializing plot_model()
2023-12-06 19:51:47,522:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 19:51:47,522:INFO:Checking exceptions
2023-12-06 19:51:47,601:INFO:Preloading libraries
2023-12-06 19:51:47,639:INFO:Copying training dataset
2023-12-06 19:51:47,639:INFO:Plot type: pipeline
2023-12-06 19:51:47,940:INFO:Visual Rendered Successfully
2023-12-06 19:51:49,029:INFO:plot_model() successfully completed......................................
2023-12-06 20:00:38,367:INFO:Initializing plot_model()
2023-12-06 20:00:38,367:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=parameter, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 20:00:38,367:INFO:Checking exceptions
2023-12-06 20:00:38,403:INFO:Preloading libraries
2023-12-06 20:00:38,427:INFO:Copying training dataset
2023-12-06 20:00:38,427:INFO:Plot type: parameter
2023-12-06 20:00:38,439:INFO:Visual Rendered Successfully
2023-12-06 20:00:38,697:INFO:plot_model() successfully completed......................................
2023-12-06 20:00:42,650:INFO:Initializing plot_model()
2023-12-06 20:00:42,651:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=learning, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 20:00:42,651:INFO:Checking exceptions
2023-12-06 20:00:42,684:INFO:Preloading libraries
2023-12-06 20:00:42,697:INFO:Copying training dataset
2023-12-06 20:00:42,698:INFO:Plot type: learning
2023-12-06 20:00:42,832:INFO:Fitting Model
2023-12-06 20:00:55,217:INFO:Visual Rendered Successfully
2023-12-06 20:00:55,447:INFO:plot_model() successfully completed......................................
2023-12-06 20:01:25,513:INFO:Initializing plot_model()
2023-12-06 20:01:25,513:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=class_report, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 20:01:25,514:INFO:Checking exceptions
2023-12-06 20:01:25,547:INFO:Preloading libraries
2023-12-06 20:01:25,557:INFO:Copying training dataset
2023-12-06 20:01:25,557:INFO:Plot type: class_report
2023-12-06 20:01:25,692:INFO:Fitting Model
2023-12-06 20:01:25,692:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but ExtraTreesClassifier was fitted with feature names
  warnings.warn(

2023-12-06 20:01:25,692:INFO:Scoring test/hold-out set
2023-12-06 20:01:26,042:INFO:Visual Rendered Successfully
2023-12-06 20:01:26,339:INFO:plot_model() successfully completed......................................
2023-12-06 20:01:28,574:INFO:Initializing plot_model()
2023-12-06 20:01:28,575:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=auc, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 20:01:28,575:INFO:Checking exceptions
2023-12-06 20:01:28,607:INFO:Preloading libraries
2023-12-06 20:01:28,619:INFO:Copying training dataset
2023-12-06 20:01:28,619:INFO:Plot type: auc
2023-12-06 20:01:28,740:INFO:Fitting Model
2023-12-06 20:01:28,747:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but ExtraTreesClassifier was fitted with feature names
  warnings.warn(

2023-12-06 20:01:28,747:INFO:Scoring test/hold-out set
2023-12-06 20:01:29,077:INFO:Visual Rendered Successfully
2023-12-06 20:01:29,297:INFO:plot_model() successfully completed......................................
2023-12-06 20:01:34,192:INFO:Initializing plot_model()
2023-12-06 20:01:34,193:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=confusion_matrix, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 20:01:34,193:INFO:Checking exceptions
2023-12-06 20:01:34,225:INFO:Preloading libraries
2023-12-06 20:01:34,237:INFO:Copying training dataset
2023-12-06 20:01:34,237:INFO:Plot type: confusion_matrix
2023-12-06 20:01:34,357:INFO:Fitting Model
2023-12-06 20:01:34,357:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but ExtraTreesClassifier was fitted with feature names
  warnings.warn(

2023-12-06 20:01:34,357:INFO:Scoring test/hold-out set
2023-12-06 20:01:34,557:INFO:Visual Rendered Successfully
2023-12-06 20:01:34,777:INFO:plot_model() successfully completed......................................
2023-12-06 20:01:35,978:INFO:Initializing plot_model()
2023-12-06 20:01:35,978:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=threshold, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 20:01:35,979:INFO:Checking exceptions
2023-12-06 20:01:36,010:INFO:Preloading libraries
2023-12-06 20:01:36,023:INFO:Copying training dataset
2023-12-06 20:01:36,023:INFO:Plot type: threshold
2023-12-06 20:01:36,219:INFO:Fitting Model
2023-12-06 20:01:47,957:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but ExtraTreesClassifier was fitted with feature names
  warnings.warn(

2023-12-06 20:01:47,982:INFO:Scoring test/hold-out set
2023-12-06 20:01:48,617:INFO:Visual Rendered Successfully
2023-12-06 20:01:48,941:INFO:plot_model() successfully completed......................................
2023-12-06 20:04:19,532:INFO:Initializing plot_model()
2023-12-06 20:04:19,533:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=pr, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 20:04:19,533:INFO:Checking exceptions
2023-12-06 20:04:19,567:INFO:Preloading libraries
2023-12-06 20:04:19,579:INFO:Copying training dataset
2023-12-06 20:04:19,579:INFO:Plot type: pr
2023-12-06 20:04:19,696:INFO:Fitting Model
2023-12-06 20:04:19,696:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but ExtraTreesClassifier was fitted with feature names
  warnings.warn(

2023-12-06 20:04:19,696:INFO:Scoring test/hold-out set
2023-12-06 20:04:19,987:INFO:Visual Rendered Successfully
2023-12-06 20:04:20,237:INFO:plot_model() successfully completed......................................
2023-12-06 20:04:25,032:INFO:Initializing plot_model()
2023-12-06 20:04:25,032:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=error, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 20:04:25,032:INFO:Checking exceptions
2023-12-06 20:04:25,065:INFO:Preloading libraries
2023-12-06 20:04:25,077:INFO:Copying training dataset
2023-12-06 20:04:25,078:INFO:Plot type: error
2023-12-06 20:04:25,197:INFO:Fitting Model
2023-12-06 20:04:25,197:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but ExtraTreesClassifier was fitted with feature names
  warnings.warn(

2023-12-06 20:04:25,197:INFO:Scoring test/hold-out set
2023-12-06 20:04:25,599:INFO:Visual Rendered Successfully
2023-12-06 20:04:25,817:INFO:plot_model() successfully completed......................................
2023-12-06 20:04:40,174:INFO:Initializing plot_model()
2023-12-06 20:04:40,174:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=class_report, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 20:04:40,174:INFO:Checking exceptions
2023-12-06 20:04:40,207:INFO:Preloading libraries
2023-12-06 20:04:40,220:INFO:Copying training dataset
2023-12-06 20:04:40,220:INFO:Plot type: class_report
2023-12-06 20:04:40,341:INFO:Fitting Model
2023-12-06 20:04:40,341:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but ExtraTreesClassifier was fitted with feature names
  warnings.warn(

2023-12-06 20:04:40,341:INFO:Scoring test/hold-out set
2023-12-06 20:04:40,657:INFO:Visual Rendered Successfully
2023-12-06 20:04:40,890:INFO:plot_model() successfully completed......................................
2023-12-06 20:04:43,175:INFO:Initializing plot_model()
2023-12-06 20:04:43,177:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023A67F061D0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8076, verbose=0, warm_start=False), plot=rfe, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-06 20:04:43,177:INFO:Checking exceptions
2023-12-06 20:04:43,209:INFO:Preloading libraries
2023-12-06 20:04:43,222:INFO:Copying training dataset
2023-12-06 20:04:43,222:INFO:Plot type: rfe
2023-12-06 20:04:43,342:INFO:Fitting Model
2023-12-07 11:36:07,762:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 11:36:07,762:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 11:36:07,762:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 11:36:07,762:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 11:36:13,171:INFO:PyCaret ClassificationExperiment
2023-12-07 11:36:13,171:INFO:Logging name: clf-default-name
2023-12-07 11:36:13,171:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-12-07 11:36:13,171:INFO:version 3.2.0
2023-12-07 11:36:13,171:INFO:Initializing setup()
2023-12-07 11:36:13,171:INFO:self.USI: 0c4a
2023-12-07 11:36:13,171:INFO:self._variable_keys: {'exp_name_log', 'y_test', 'y', 'fold_groups_param', 'fix_imbalance', 'idx', 'USI', 'gpu_n_jobs_param', 'seed', '_available_plots', 'X', 'pipeline', 'fold_generator', 'memory', 'gpu_param', 'html_param', '_ml_usecase', 'exp_id', 'X_test', 'n_jobs_param', 'fold_shuffle_param', 'target_param', 'is_multiclass', 'log_plots_param', 'y_train', 'logging_param', 'X_train', 'data'}
2023-12-07 11:36:13,175:INFO:Checking environment
2023-12-07 11:36:13,175:INFO:python_version: 3.11.5
2023-12-07 11:36:13,175:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2023-12-07 11:36:13,175:INFO:machine: AMD64
2023-12-07 11:36:13,175:INFO:platform: Windows-10-10.0.22631-SP0
2023-12-07 11:36:13,183:INFO:Memory: svmem(total=8434700288, available=1445974016, percent=82.9, used=6988726272, free=1445974016)
2023-12-07 11:36:13,183:INFO:Physical Core: 4
2023-12-07 11:36:13,183:INFO:Logical Core: 8
2023-12-07 11:36:13,183:INFO:Checking libraries
2023-12-07 11:36:13,183:INFO:System:
2023-12-07 11:36:13,183:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2023-12-07 11:36:13,183:INFO:executable: c:\Users\sebas\anaconda3\envs\Modelos\python.exe
2023-12-07 11:36:13,183:INFO:   machine: Windows-10-10.0.22631-SP0
2023-12-07 11:36:13,183:INFO:PyCaret required dependencies:
2023-12-07 11:36:13,242:INFO:                 pip: 23.3.1
2023-12-07 11:36:13,242:INFO:          setuptools: 68.0.0
2023-12-07 11:36:13,242:INFO:             pycaret: 3.2.0
2023-12-07 11:36:13,242:INFO:             IPython: 8.18.1
2023-12-07 11:36:13,242:INFO:          ipywidgets: 8.1.1
2023-12-07 11:36:13,242:INFO:                tqdm: 4.66.1
2023-12-07 11:36:13,242:INFO:               numpy: 1.24.4
2023-12-07 11:36:13,242:INFO:              pandas: 1.5.3
2023-12-07 11:36:13,242:INFO:              jinja2: 3.1.2
2023-12-07 11:36:13,242:INFO:               scipy: 1.11.4
2023-12-07 11:36:13,242:INFO:              joblib: 1.3.2
2023-12-07 11:36:13,242:INFO:             sklearn: 1.2.2
2023-12-07 11:36:13,242:INFO:                pyod: 1.1.2
2023-12-07 11:36:13,242:INFO:            imblearn: 0.11.0
2023-12-07 11:36:13,242:INFO:   category_encoders: 2.6.3
2023-12-07 11:36:13,242:INFO:            lightgbm: 4.1.0
2023-12-07 11:36:13,242:INFO:               numba: 0.57.1
2023-12-07 11:36:13,242:INFO:            requests: 2.31.0
2023-12-07 11:36:13,242:INFO:          matplotlib: 3.8.2
2023-12-07 11:36:13,242:INFO:          scikitplot: 0.3.7
2023-12-07 11:36:13,242:INFO:         yellowbrick: 1.5
2023-12-07 11:36:13,242:INFO:              plotly: 5.18.0
2023-12-07 11:36:13,242:INFO:    plotly-resampler: Not installed
2023-12-07 11:36:13,242:INFO:             kaleido: 0.2.1
2023-12-07 11:36:13,248:INFO:           schemdraw: 0.15
2023-12-07 11:36:13,248:INFO:         statsmodels: 0.14.0
2023-12-07 11:36:13,248:INFO:              sktime: 0.21.1
2023-12-07 11:36:13,248:INFO:               tbats: 1.1.3
2023-12-07 11:36:13,248:INFO:            pmdarima: 2.0.3
2023-12-07 11:36:13,248:INFO:              psutil: 5.9.5
2023-12-07 11:36:13,248:INFO:          markupsafe: 2.1.3
2023-12-07 11:36:13,248:INFO:             pickle5: Not installed
2023-12-07 11:36:13,248:INFO:         cloudpickle: 3.0.0
2023-12-07 11:36:13,248:INFO:         deprecation: 2.1.0
2023-12-07 11:36:13,248:INFO:              xxhash: 3.4.1
2023-12-07 11:36:13,250:INFO:           wurlitzer: 3.0.3
2023-12-07 11:36:13,250:INFO:PyCaret optional dependencies:
2023-12-07 11:36:13,272:INFO:                shap: Not installed
2023-12-07 11:36:13,272:INFO:           interpret: Not installed
2023-12-07 11:36:13,272:INFO:                umap: 0.5.5
2023-12-07 11:36:13,272:INFO:     ydata_profiling: Not installed
2023-12-07 11:36:13,272:INFO:  explainerdashboard: Not installed
2023-12-07 11:36:13,272:INFO:             autoviz: Not installed
2023-12-07 11:36:13,272:INFO:           fairlearn: Not installed
2023-12-07 11:36:13,272:INFO:          deepchecks: Not installed
2023-12-07 11:36:13,272:INFO:             xgboost: Not installed
2023-12-07 11:36:13,272:INFO:            catboost: Not installed
2023-12-07 11:36:13,272:INFO:              kmodes: Not installed
2023-12-07 11:36:13,272:INFO:             mlxtend: Not installed
2023-12-07 11:36:13,272:INFO:       statsforecast: Not installed
2023-12-07 11:36:13,272:INFO:        tune_sklearn: Not installed
2023-12-07 11:36:13,272:INFO:                 ray: Not installed
2023-12-07 11:36:13,272:INFO:            hyperopt: Not installed
2023-12-07 11:36:13,272:INFO:              optuna: Not installed
2023-12-07 11:36:13,272:INFO:               skopt: Not installed
2023-12-07 11:36:13,272:INFO:              mlflow: Not installed
2023-12-07 11:36:13,272:INFO:              gradio: Not installed
2023-12-07 11:36:13,272:INFO:             fastapi: Not installed
2023-12-07 11:36:13,272:INFO:             uvicorn: Not installed
2023-12-07 11:36:13,272:INFO:              m2cgen: Not installed
2023-12-07 11:36:13,272:INFO:           evidently: Not installed
2023-12-07 11:36:13,272:INFO:               fugue: Not installed
2023-12-07 11:36:13,272:INFO:           streamlit: Not installed
2023-12-07 11:36:13,272:INFO:             prophet: Not installed
2023-12-07 11:36:13,272:INFO:None
2023-12-07 11:36:13,272:INFO:Set up data.
2023-12-07 11:36:13,292:INFO:Set up folding strategy.
2023-12-07 11:36:13,292:INFO:Set up train/test split.
2023-12-07 11:36:13,304:INFO:Set up index.
2023-12-07 11:36:13,304:INFO:Assigning column types.
2023-12-07 11:36:13,313:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-12-07 11:36:13,377:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-07 11:36:13,382:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-07 11:36:13,435:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-07 11:36:13,435:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-07 11:36:13,502:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-07 11:36:13,502:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-07 11:36:13,551:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-07 11:36:13,551:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-07 11:36:13,551:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-12-07 11:36:13,623:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-07 11:36:13,680:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-07 11:36:13,681:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-07 11:36:13,770:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-07 11:36:13,825:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-07 11:36:13,825:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-07 11:36:13,825:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-12-07 11:36:13,970:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-07 11:36:13,971:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-07 11:36:14,100:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-07 11:36:14,101:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-07 11:36:14,103:INFO:Preparing preprocessing pipeline...
2023-12-07 11:36:14,103:INFO:Set up label encoding.
2023-12-07 11:36:14,103:INFO:Set up simple imputation.
2023-12-07 11:36:14,103:INFO:Set up column name cleaning.
2023-12-07 11:36:14,171:INFO:Finished creating preprocessing pipeline.
2023-12-07 11:36:14,183:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\sebas\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['GENDER_1', 'GENDER_2', 'AGE',
                                             'SMOKING_1', 'SMOKING_2',
                                             'YELLOW_FINGERS_1',
                                             'YELLOW_FINGERS_2', 'ANXIETY_1...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2023-12-07 11:36:14,183:INFO:Creating final display dataframe.
2023-12-07 11:36:14,346:INFO:Setup _display_container:                     Description             Value
0                    Session id              5086
1                        Target       LUNG_CANCER
2                   Target type            Binary
3                Target mapping        1: 0, 2: 1
4           Original data shape         (540, 30)
5        Transformed data shape         (540, 30)
6   Transformed train set shape         (378, 30)
7    Transformed test set shape         (162, 30)
8              Numeric features                29
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              0c4a
2023-12-07 11:36:14,525:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-07 11:36:14,525:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-07 11:36:14,651:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-07 11:36:14,651:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-07 11:36:14,651:INFO:setup() successfully completed in 1.49s...............
2023-12-07 11:36:16,762:INFO:Initializing compare_models()
2023-12-07 11:36:16,762:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2023-12-07 11:36:16,762:INFO:Checking exceptions
2023-12-07 11:36:16,771:INFO:Preparing display monitor
2023-12-07 11:36:16,820:INFO:Initializing Logistic Regression
2023-12-07 11:36:16,820:INFO:Total runtime is 0.0 minutes
2023-12-07 11:36:16,822:INFO:SubProcess create_model() called ==================================
2023-12-07 11:36:16,822:INFO:Initializing create_model()
2023-12-07 11:36:16,826:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E07FDF6350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-07 11:36:16,826:INFO:Checking exceptions
2023-12-07 11:36:16,826:INFO:Importing libraries
2023-12-07 11:36:16,826:INFO:Copying training dataset
2023-12-07 11:36:16,835:INFO:Defining folds
2023-12-07 11:36:16,835:INFO:Declaring metric variables
2023-12-07 11:36:16,843:INFO:Importing untrained model
2023-12-07 11:36:16,852:INFO:Logistic Regression Imported successfully
2023-12-07 11:36:16,870:INFO:Starting cross validation
2023-12-07 11:36:16,870:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-07 11:36:25,224:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,231:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,240:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,395:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,401:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,403:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,403:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,412:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,412:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,453:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,453:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,468:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,492:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,503:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,512:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,516:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,521:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,525:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,531:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,533:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,540:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,551:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,560:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,566:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,620:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,623:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,630:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,751:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,752:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,756:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:25,768:INFO:Calculating mean and std
2023-12-07 11:36:25,771:INFO:Creating metrics dataframe
2023-12-07 11:36:25,776:INFO:Uploading results into container
2023-12-07 11:36:25,776:INFO:Uploading model into container now
2023-12-07 11:36:25,780:INFO:_master_model_container: 1
2023-12-07 11:36:25,780:INFO:_display_container: 2
2023-12-07 11:36:25,780:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5086, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-12-07 11:36:25,780:INFO:create_model() successfully completed......................................
2023-12-07 11:36:25,892:INFO:SubProcess create_model() end ==================================
2023-12-07 11:36:25,892:INFO:Creating metrics dataframe
2023-12-07 11:36:25,914:INFO:Initializing K Neighbors Classifier
2023-12-07 11:36:25,914:INFO:Total runtime is 0.15157320499420165 minutes
2023-12-07 11:36:25,922:INFO:SubProcess create_model() called ==================================
2023-12-07 11:36:25,922:INFO:Initializing create_model()
2023-12-07 11:36:25,922:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E07FDF6350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-07 11:36:25,922:INFO:Checking exceptions
2023-12-07 11:36:25,922:INFO:Importing libraries
2023-12-07 11:36:25,922:INFO:Copying training dataset
2023-12-07 11:36:25,930:INFO:Defining folds
2023-12-07 11:36:25,930:INFO:Declaring metric variables
2023-12-07 11:36:25,940:INFO:Importing untrained model
2023-12-07 11:36:25,941:INFO:K Neighbors Classifier Imported successfully
2023-12-07 11:36:25,954:INFO:Starting cross validation
2023-12-07 11:36:25,961:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-07 11:36:26,585:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,585:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,587:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,587:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,587:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,591:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,591:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,592:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,592:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,595:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,595:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,600:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,600:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,602:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,603:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,603:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,603:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,603:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,611:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,615:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,622:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,622:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,630:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,655:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,660:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,661:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,661:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,665:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,668:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,675:INFO:Calculating mean and std
2023-12-07 11:36:26,676:INFO:Creating metrics dataframe
2023-12-07 11:36:26,685:INFO:Uploading results into container
2023-12-07 11:36:26,685:INFO:Uploading model into container now
2023-12-07 11:36:26,685:INFO:_master_model_container: 2
2023-12-07 11:36:26,685:INFO:_display_container: 2
2023-12-07 11:36:26,685:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-12-07 11:36:26,685:INFO:create_model() successfully completed......................................
2023-12-07 11:36:26,783:INFO:SubProcess create_model() end ==================================
2023-12-07 11:36:26,783:INFO:Creating metrics dataframe
2023-12-07 11:36:26,801:INFO:Initializing Naive Bayes
2023-12-07 11:36:26,801:INFO:Total runtime is 0.16635365883509318 minutes
2023-12-07 11:36:26,810:INFO:SubProcess create_model() called ==================================
2023-12-07 11:36:26,811:INFO:Initializing create_model()
2023-12-07 11:36:26,811:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E07FDF6350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-07 11:36:26,811:INFO:Checking exceptions
2023-12-07 11:36:26,811:INFO:Importing libraries
2023-12-07 11:36:26,811:INFO:Copying training dataset
2023-12-07 11:36:26,815:INFO:Defining folds
2023-12-07 11:36:26,815:INFO:Declaring metric variables
2023-12-07 11:36:26,823:INFO:Importing untrained model
2023-12-07 11:36:26,832:INFO:Naive Bayes Imported successfully
2023-12-07 11:36:26,841:INFO:Starting cross validation
2023-12-07 11:36:26,841:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-07 11:36:26,931:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,935:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,936:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,939:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,939:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,941:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,941:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,942:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,942:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,944:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,944:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,944:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,944:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,944:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,952:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,952:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,953:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,953:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,953:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,953:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,962:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,962:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,968:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:26,973:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,002:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,002:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,011:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,011:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,012:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,012:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,033:INFO:Calculating mean and std
2023-12-07 11:36:27,033:INFO:Creating metrics dataframe
2023-12-07 11:36:27,042:INFO:Uploading results into container
2023-12-07 11:36:27,042:INFO:Uploading model into container now
2023-12-07 11:36:27,042:INFO:_master_model_container: 3
2023-12-07 11:36:27,042:INFO:_display_container: 2
2023-12-07 11:36:27,042:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-12-07 11:36:27,042:INFO:create_model() successfully completed......................................
2023-12-07 11:36:27,141:INFO:SubProcess create_model() end ==================================
2023-12-07 11:36:27,141:INFO:Creating metrics dataframe
2023-12-07 11:36:27,154:INFO:Initializing Decision Tree Classifier
2023-12-07 11:36:27,154:INFO:Total runtime is 0.17224728266398112 minutes
2023-12-07 11:36:27,163:INFO:SubProcess create_model() called ==================================
2023-12-07 11:36:27,163:INFO:Initializing create_model()
2023-12-07 11:36:27,163:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E07FDF6350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-07 11:36:27,163:INFO:Checking exceptions
2023-12-07 11:36:27,163:INFO:Importing libraries
2023-12-07 11:36:27,163:INFO:Copying training dataset
2023-12-07 11:36:27,174:INFO:Defining folds
2023-12-07 11:36:27,174:INFO:Declaring metric variables
2023-12-07 11:36:27,174:INFO:Importing untrained model
2023-12-07 11:36:27,181:INFO:Decision Tree Classifier Imported successfully
2023-12-07 11:36:27,200:INFO:Starting cross validation
2023-12-07 11:36:27,202:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-07 11:36:27,286:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,286:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,291:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,291:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,291:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,294:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,295:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,295:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,295:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,295:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,300:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,301:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,301:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,302:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,302:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,302:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,302:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,305:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,305:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,305:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,305:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,305:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,315:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,315:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,346:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,351:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,351:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,351:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,356:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,356:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,367:INFO:Calculating mean and std
2023-12-07 11:36:27,367:INFO:Creating metrics dataframe
2023-12-07 11:36:27,371:INFO:Uploading results into container
2023-12-07 11:36:27,374:INFO:Uploading model into container now
2023-12-07 11:36:27,374:INFO:_master_model_container: 4
2023-12-07 11:36:27,374:INFO:_display_container: 2
2023-12-07 11:36:27,375:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5086, splitter='best')
2023-12-07 11:36:27,375:INFO:create_model() successfully completed......................................
2023-12-07 11:36:27,454:INFO:SubProcess create_model() end ==================================
2023-12-07 11:36:27,454:INFO:Creating metrics dataframe
2023-12-07 11:36:27,472:INFO:Initializing SVM - Linear Kernel
2023-12-07 11:36:27,472:INFO:Total runtime is 0.1775471051534017 minutes
2023-12-07 11:36:27,473:INFO:SubProcess create_model() called ==================================
2023-12-07 11:36:27,473:INFO:Initializing create_model()
2023-12-07 11:36:27,473:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E07FDF6350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-07 11:36:27,473:INFO:Checking exceptions
2023-12-07 11:36:27,473:INFO:Importing libraries
2023-12-07 11:36:27,473:INFO:Copying training dataset
2023-12-07 11:36:27,481:INFO:Defining folds
2023-12-07 11:36:27,481:INFO:Declaring metric variables
2023-12-07 11:36:27,492:INFO:Importing untrained model
2023-12-07 11:36:27,502:INFO:SVM - Linear Kernel Imported successfully
2023-12-07 11:36:27,513:INFO:Starting cross validation
2023-12-07 11:36:27,513:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-07 11:36:27,600:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-07 11:36:27,602:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-07 11:36:27,603:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-07 11:36:27,605:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,605:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-07 11:36:27,605:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,605:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,605:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-07 11:36:27,610:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,611:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,611:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,611:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-07 11:36:27,615:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,615:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,615:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,615:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,619:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,620:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,621:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,622:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-07 11:36:27,622:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,625:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,625:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,625:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,627:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-07 11:36:27,630:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,631:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,632:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,635:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,635:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,641:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,668:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-07 11:36:27,670:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,674:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,676:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-12-07 11:36:27,677:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,677:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,682:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,687:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,697:INFO:Calculating mean and std
2023-12-07 11:36:27,700:INFO:Creating metrics dataframe
2023-12-07 11:36:27,701:INFO:Uploading results into container
2023-12-07 11:36:27,701:INFO:Uploading model into container now
2023-12-07 11:36:27,701:INFO:_master_model_container: 5
2023-12-07 11:36:27,701:INFO:_display_container: 2
2023-12-07 11:36:27,701:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=5086, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2023-12-07 11:36:27,701:INFO:create_model() successfully completed......................................
2023-12-07 11:36:27,792:INFO:SubProcess create_model() end ==================================
2023-12-07 11:36:27,792:INFO:Creating metrics dataframe
2023-12-07 11:36:27,810:INFO:Initializing Ridge Classifier
2023-12-07 11:36:27,810:INFO:Total runtime is 0.1831724683443705 minutes
2023-12-07 11:36:27,815:INFO:SubProcess create_model() called ==================================
2023-12-07 11:36:27,815:INFO:Initializing create_model()
2023-12-07 11:36:27,815:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E07FDF6350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-07 11:36:27,815:INFO:Checking exceptions
2023-12-07 11:36:27,815:INFO:Importing libraries
2023-12-07 11:36:27,815:INFO:Copying training dataset
2023-12-07 11:36:27,823:INFO:Defining folds
2023-12-07 11:36:27,823:INFO:Declaring metric variables
2023-12-07 11:36:27,823:INFO:Importing untrained model
2023-12-07 11:36:27,830:INFO:Ridge Classifier Imported successfully
2023-12-07 11:36:27,847:INFO:Starting cross validation
2023-12-07 11:36:27,851:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-07 11:36:27,980:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-07 11:36:27,980:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-07 11:36:27,980:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-07 11:36:27,982:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,982:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,982:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,982:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-07 11:36:27,982:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-07 11:36:27,986:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-07 11:36:27,988:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,988:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,988:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,990:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,990:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,990:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,991:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-07 11:36:27,994:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,994:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,994:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,990:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,994:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,994:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,994:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:27,998:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,001:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,002:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,002:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,002:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,002:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,008:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,043:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-07 11:36:28,043:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-12-07 11:36:28,043:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,043:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,043:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,043:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,052:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,052:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,060:INFO:Calculating mean and std
2023-12-07 11:36:28,060:INFO:Creating metrics dataframe
2023-12-07 11:36:28,068:INFO:Uploading results into container
2023-12-07 11:36:28,068:INFO:Uploading model into container now
2023-12-07 11:36:28,068:INFO:_master_model_container: 6
2023-12-07 11:36:28,068:INFO:_display_container: 2
2023-12-07 11:36:28,068:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=5086, solver='auto',
                tol=0.0001)
2023-12-07 11:36:28,068:INFO:create_model() successfully completed......................................
2023-12-07 11:36:28,150:INFO:SubProcess create_model() end ==================================
2023-12-07 11:36:28,150:INFO:Creating metrics dataframe
2023-12-07 11:36:28,165:INFO:Initializing Random Forest Classifier
2023-12-07 11:36:28,165:INFO:Total runtime is 0.1890851338704427 minutes
2023-12-07 11:36:28,173:INFO:SubProcess create_model() called ==================================
2023-12-07 11:36:28,173:INFO:Initializing create_model()
2023-12-07 11:36:28,173:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E07FDF6350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-07 11:36:28,173:INFO:Checking exceptions
2023-12-07 11:36:28,173:INFO:Importing libraries
2023-12-07 11:36:28,173:INFO:Copying training dataset
2023-12-07 11:36:28,181:INFO:Defining folds
2023-12-07 11:36:28,181:INFO:Declaring metric variables
2023-12-07 11:36:28,182:INFO:Importing untrained model
2023-12-07 11:36:28,191:INFO:Random Forest Classifier Imported successfully
2023-12-07 11:36:28,205:INFO:Starting cross validation
2023-12-07 11:36:28,205:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-07 11:36:28,811:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,816:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,822:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,830:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,831:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,831:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,831:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,835:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,835:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,835:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,840:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,841:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,843:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,844:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,845:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,851:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,851:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,852:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,852:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,854:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,859:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,973:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,977:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:28,980:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,221:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,224:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,224:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,233:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,241:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,243:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,253:INFO:Calculating mean and std
2023-12-07 11:36:29,253:INFO:Creating metrics dataframe
2023-12-07 11:36:29,260:INFO:Uploading results into container
2023-12-07 11:36:29,260:INFO:Uploading model into container now
2023-12-07 11:36:29,261:INFO:_master_model_container: 7
2023-12-07 11:36:29,261:INFO:_display_container: 2
2023-12-07 11:36:29,261:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=5086, verbose=0, warm_start=False)
2023-12-07 11:36:29,261:INFO:create_model() successfully completed......................................
2023-12-07 11:36:29,341:INFO:SubProcess create_model() end ==================================
2023-12-07 11:36:29,341:INFO:Creating metrics dataframe
2023-12-07 11:36:29,361:INFO:Initializing Quadratic Discriminant Analysis
2023-12-07 11:36:29,361:INFO:Total runtime is 0.20901761849721273 minutes
2023-12-07 11:36:29,362:INFO:SubProcess create_model() called ==================================
2023-12-07 11:36:29,362:INFO:Initializing create_model()
2023-12-07 11:36:29,362:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E07FDF6350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-07 11:36:29,362:INFO:Checking exceptions
2023-12-07 11:36:29,362:INFO:Importing libraries
2023-12-07 11:36:29,362:INFO:Copying training dataset
2023-12-07 11:36:29,376:INFO:Defining folds
2023-12-07 11:36:29,376:INFO:Declaring metric variables
2023-12-07 11:36:29,381:INFO:Importing untrained model
2023-12-07 11:36:29,386:INFO:Quadratic Discriminant Analysis Imported successfully
2023-12-07 11:36:29,402:INFO:Starting cross validation
2023-12-07 11:36:29,403:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-07 11:36:29,492:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-07 11:36:29,492:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-07 11:36:29,492:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-07 11:36:29,492:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-07 11:36:29,492:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-07 11:36:29,492:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-07 11:36:29,492:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-07 11:36:29,492:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-07 11:36:29,525:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,551:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,552:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,552:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,560:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,562:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,562:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,562:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,570:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,573:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,576:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,576:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,576:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,580:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,581:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,581:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,582:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,582:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-07 11:36:29,582:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,582:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,582:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,591:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,591:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,592:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,592:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,606:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-07 11:36:29,611:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-12-07 11:36:29,622:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,631:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,632:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,632:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,640:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,642:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:29,652:INFO:Calculating mean and std
2023-12-07 11:36:29,652:INFO:Creating metrics dataframe
2023-12-07 11:36:29,654:INFO:Uploading results into container
2023-12-07 11:36:29,654:INFO:Uploading model into container now
2023-12-07 11:36:29,654:INFO:_master_model_container: 8
2023-12-07 11:36:29,654:INFO:_display_container: 2
2023-12-07 11:36:29,654:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2023-12-07 11:36:29,654:INFO:create_model() successfully completed......................................
2023-12-07 11:36:29,742:INFO:SubProcess create_model() end ==================================
2023-12-07 11:36:29,742:INFO:Creating metrics dataframe
2023-12-07 11:36:29,761:INFO:Initializing Ada Boost Classifier
2023-12-07 11:36:29,761:INFO:Total runtime is 0.21568175951639812 minutes
2023-12-07 11:36:29,768:INFO:SubProcess create_model() called ==================================
2023-12-07 11:36:29,768:INFO:Initializing create_model()
2023-12-07 11:36:29,770:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E07FDF6350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-07 11:36:29,770:INFO:Checking exceptions
2023-12-07 11:36:29,770:INFO:Importing libraries
2023-12-07 11:36:29,770:INFO:Copying training dataset
2023-12-07 11:36:29,772:INFO:Defining folds
2023-12-07 11:36:29,772:INFO:Declaring metric variables
2023-12-07 11:36:29,780:INFO:Importing untrained model
2023-12-07 11:36:29,784:INFO:Ada Boost Classifier Imported successfully
2023-12-07 11:36:29,813:INFO:Starting cross validation
2023-12-07 11:36:29,813:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-07 11:36:30,132:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,141:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,142:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,142:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,148:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,148:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,152:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,152:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,152:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,156:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,156:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,156:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,156:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,161:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,162:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,162:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,162:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,164:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,170:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,171:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,172:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,177:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,181:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,182:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,350:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,352:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,352:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,352:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,357:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,362:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,378:INFO:Calculating mean and std
2023-12-07 11:36:30,378:INFO:Creating metrics dataframe
2023-12-07 11:36:30,383:INFO:Uploading results into container
2023-12-07 11:36:30,383:INFO:Uploading model into container now
2023-12-07 11:36:30,383:INFO:_master_model_container: 9
2023-12-07 11:36:30,383:INFO:_display_container: 2
2023-12-07 11:36:30,383:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=5086)
2023-12-07 11:36:30,383:INFO:create_model() successfully completed......................................
2023-12-07 11:36:30,464:INFO:SubProcess create_model() end ==================================
2023-12-07 11:36:30,464:INFO:Creating metrics dataframe
2023-12-07 11:36:30,482:INFO:Initializing Gradient Boosting Classifier
2023-12-07 11:36:30,482:INFO:Total runtime is 0.2277033487955729 minutes
2023-12-07 11:36:30,492:INFO:SubProcess create_model() called ==================================
2023-12-07 11:36:30,492:INFO:Initializing create_model()
2023-12-07 11:36:30,492:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E07FDF6350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-07 11:36:30,492:INFO:Checking exceptions
2023-12-07 11:36:30,492:INFO:Importing libraries
2023-12-07 11:36:30,492:INFO:Copying training dataset
2023-12-07 11:36:30,496:INFO:Defining folds
2023-12-07 11:36:30,501:INFO:Declaring metric variables
2023-12-07 11:36:30,504:INFO:Importing untrained model
2023-12-07 11:36:30,512:INFO:Gradient Boosting Classifier Imported successfully
2023-12-07 11:36:30,529:INFO:Starting cross validation
2023-12-07 11:36:30,530:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-07 11:36:30,878:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,882:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,884:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,886:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,890:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,891:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,891:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,891:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,895:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,895:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,895:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,895:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,895:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,902:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,905:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,905:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,905:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,911:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,911:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,911:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,915:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,921:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,921:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:30,925:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,110:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,112:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,112:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,112:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,121:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,122:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,132:INFO:Calculating mean and std
2023-12-07 11:36:31,132:INFO:Creating metrics dataframe
2023-12-07 11:36:31,136:INFO:Uploading results into container
2023-12-07 11:36:31,136:INFO:Uploading model into container now
2023-12-07 11:36:31,140:INFO:_master_model_container: 10
2023-12-07 11:36:31,140:INFO:_display_container: 2
2023-12-07 11:36:31,141:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=5086, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-12-07 11:36:31,141:INFO:create_model() successfully completed......................................
2023-12-07 11:36:31,252:INFO:SubProcess create_model() end ==================================
2023-12-07 11:36:31,252:INFO:Creating metrics dataframe
2023-12-07 11:36:31,271:INFO:Initializing Linear Discriminant Analysis
2023-12-07 11:36:31,271:INFO:Total runtime is 0.2408511241277059 minutes
2023-12-07 11:36:31,275:INFO:SubProcess create_model() called ==================================
2023-12-07 11:36:31,277:INFO:Initializing create_model()
2023-12-07 11:36:31,277:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E07FDF6350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-07 11:36:31,277:INFO:Checking exceptions
2023-12-07 11:36:31,277:INFO:Importing libraries
2023-12-07 11:36:31,277:INFO:Copying training dataset
2023-12-07 11:36:31,283:INFO:Defining folds
2023-12-07 11:36:31,283:INFO:Declaring metric variables
2023-12-07 11:36:31,291:INFO:Importing untrained model
2023-12-07 11:36:31,291:INFO:Linear Discriminant Analysis Imported successfully
2023-12-07 11:36:31,311:INFO:Starting cross validation
2023-12-07 11:36:31,311:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-07 11:36:31,400:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,401:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,401:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,401:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,401:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,406:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,406:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,406:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,406:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,410:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,410:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,410:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,412:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,414:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,414:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,414:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,416:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,416:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,416:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,420:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,422:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,422:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,430:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,431:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,463:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,463:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,463:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,471:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,471:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,475:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:31,481:INFO:Calculating mean and std
2023-12-07 11:36:31,481:INFO:Creating metrics dataframe
2023-12-07 11:36:31,487:INFO:Uploading results into container
2023-12-07 11:36:31,487:INFO:Uploading model into container now
2023-12-07 11:36:31,487:INFO:_master_model_container: 11
2023-12-07 11:36:31,487:INFO:_display_container: 2
2023-12-07 11:36:31,487:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2023-12-07 11:36:31,487:INFO:create_model() successfully completed......................................
2023-12-07 11:36:31,569:INFO:SubProcess create_model() end ==================================
2023-12-07 11:36:31,569:INFO:Creating metrics dataframe
2023-12-07 11:36:31,585:INFO:Initializing Extra Trees Classifier
2023-12-07 11:36:31,585:INFO:Total runtime is 0.2460862676302592 minutes
2023-12-07 11:36:31,593:INFO:SubProcess create_model() called ==================================
2023-12-07 11:36:31,593:INFO:Initializing create_model()
2023-12-07 11:36:31,593:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E07FDF6350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-07 11:36:31,593:INFO:Checking exceptions
2023-12-07 11:36:31,593:INFO:Importing libraries
2023-12-07 11:36:31,593:INFO:Copying training dataset
2023-12-07 11:36:31,601:INFO:Defining folds
2023-12-07 11:36:31,601:INFO:Declaring metric variables
2023-12-07 11:36:31,601:INFO:Importing untrained model
2023-12-07 11:36:31,612:INFO:Extra Trees Classifier Imported successfully
2023-12-07 11:36:31,625:INFO:Starting cross validation
2023-12-07 11:36:31,630:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-07 11:36:32,172:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,178:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,181:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,183:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,183:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,187:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,187:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,191:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,192:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,192:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,196:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,199:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,210:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,211:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,215:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,215:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,221:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,223:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,232:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,233:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,241:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,293:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,296:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,303:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,526:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,531:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,531:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,531:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,540:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,542:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:32,560:INFO:Calculating mean and std
2023-12-07 11:36:32,561:INFO:Creating metrics dataframe
2023-12-07 11:36:32,563:INFO:Uploading results into container
2023-12-07 11:36:32,563:INFO:Uploading model into container now
2023-12-07 11:36:32,563:INFO:_master_model_container: 12
2023-12-07 11:36:32,563:INFO:_display_container: 2
2023-12-07 11:36:32,570:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=5086, verbose=0, warm_start=False)
2023-12-07 11:36:32,570:INFO:create_model() successfully completed......................................
2023-12-07 11:36:32,652:INFO:SubProcess create_model() end ==================================
2023-12-07 11:36:32,652:INFO:Creating metrics dataframe
2023-12-07 11:36:32,671:INFO:Initializing Light Gradient Boosting Machine
2023-12-07 11:36:32,671:INFO:Total runtime is 0.2641966780026754 minutes
2023-12-07 11:36:32,680:INFO:SubProcess create_model() called ==================================
2023-12-07 11:36:32,681:INFO:Initializing create_model()
2023-12-07 11:36:32,681:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E07FDF6350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-07 11:36:32,681:INFO:Checking exceptions
2023-12-07 11:36:32,681:INFO:Importing libraries
2023-12-07 11:36:32,681:INFO:Copying training dataset
2023-12-07 11:36:32,684:INFO:Defining folds
2023-12-07 11:36:32,684:INFO:Declaring metric variables
2023-12-07 11:36:32,692:INFO:Importing untrained model
2023-12-07 11:36:32,701:INFO:Light Gradient Boosting Machine Imported successfully
2023-12-07 11:36:32,716:INFO:Starting cross validation
2023-12-07 11:36:32,721:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-07 11:36:33,233:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,241:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,241:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,247:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,250:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,255:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,260:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,264:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,272:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,281:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,288:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,295:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,305:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,312:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,316:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,341:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,347:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,347:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,352:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,354:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,360:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,402:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,408:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,412:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,532:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,540:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,543:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,543:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,552:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,556:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,573:INFO:Calculating mean and std
2023-12-07 11:36:33,573:INFO:Creating metrics dataframe
2023-12-07 11:36:33,582:INFO:Uploading results into container
2023-12-07 11:36:33,582:INFO:Uploading model into container now
2023-12-07 11:36:33,582:INFO:_master_model_container: 13
2023-12-07 11:36:33,582:INFO:_display_container: 2
2023-12-07 11:36:33,582:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=5086, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2023-12-07 11:36:33,588:INFO:create_model() successfully completed......................................
2023-12-07 11:36:33,690:INFO:SubProcess create_model() end ==================================
2023-12-07 11:36:33,690:INFO:Creating metrics dataframe
2023-12-07 11:36:33,718:INFO:Initializing Dummy Classifier
2023-12-07 11:36:33,718:INFO:Total runtime is 0.2816399057706197 minutes
2023-12-07 11:36:33,721:INFO:SubProcess create_model() called ==================================
2023-12-07 11:36:33,721:INFO:Initializing create_model()
2023-12-07 11:36:33,721:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E07FDF6350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-07 11:36:33,721:INFO:Checking exceptions
2023-12-07 11:36:33,721:INFO:Importing libraries
2023-12-07 11:36:33,721:INFO:Copying training dataset
2023-12-07 11:36:33,731:INFO:Defining folds
2023-12-07 11:36:33,731:INFO:Declaring metric variables
2023-12-07 11:36:33,735:INFO:Importing untrained model
2023-12-07 11:36:33,743:INFO:Dummy Classifier Imported successfully
2023-12-07 11:36:33,751:INFO:Starting cross validation
2023-12-07 11:36:33,751:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-07 11:36:33,830:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,832:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,836:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,836:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,836:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,842:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,842:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-07 11:36:33,842:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,842:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-07 11:36:33,842:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,842:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,842:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,842:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,842:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,842:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-07 11:36:33,849:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,851:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,853:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-07 11:36:33,853:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-07 11:36:33,853:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-07 11:36:33,857:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,857:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,857:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,875:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,879:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,879:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,881:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-07 11:36:33,881:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,885:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,890:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-07 11:36:33,891:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,906:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,911:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,911:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,911:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-07 11:36:33,914:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,916:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,920:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-12-07 11:36:33,922:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:36:33,936:INFO:Calculating mean and std
2023-12-07 11:36:33,938:INFO:Creating metrics dataframe
2023-12-07 11:36:33,940:INFO:Uploading results into container
2023-12-07 11:36:33,940:INFO:Uploading model into container now
2023-12-07 11:36:33,945:INFO:_master_model_container: 14
2023-12-07 11:36:33,945:INFO:_display_container: 2
2023-12-07 11:36:33,946:INFO:DummyClassifier(constant=None, random_state=5086, strategy='prior')
2023-12-07 11:36:33,946:INFO:create_model() successfully completed......................................
2023-12-07 11:36:34,052:INFO:SubProcess create_model() end ==================================
2023-12-07 11:36:34,052:INFO:Creating metrics dataframe
2023-12-07 11:36:34,093:INFO:Initializing create_model()
2023-12-07 11:36:34,093:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=5086, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-07 11:36:34,093:INFO:Checking exceptions
2023-12-07 11:36:34,100:INFO:Importing libraries
2023-12-07 11:36:34,100:INFO:Copying training dataset
2023-12-07 11:36:34,111:INFO:Defining folds
2023-12-07 11:36:34,111:INFO:Declaring metric variables
2023-12-07 11:36:34,112:INFO:Importing untrained model
2023-12-07 11:36:34,112:INFO:Declaring custom model
2023-12-07 11:36:34,112:INFO:Extra Trees Classifier Imported successfully
2023-12-07 11:36:34,112:INFO:Cross validation set to False
2023-12-07 11:36:34,112:INFO:Fitting Model
2023-12-07 11:36:34,400:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=5086, verbose=0, warm_start=False)
2023-12-07 11:36:34,400:INFO:create_model() successfully completed......................................
2023-12-07 11:36:34,573:INFO:_master_model_container: 14
2023-12-07 11:36:34,573:INFO:_display_container: 2
2023-12-07 11:36:34,573:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=5086, verbose=0, warm_start=False)
2023-12-07 11:36:34,573:INFO:compare_models() successfully completed......................................
2023-12-07 11:36:39,690:INFO:Initializing evaluate_model()
2023-12-07 11:36:39,690:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=5086, verbose=0, warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2023-12-07 11:36:39,714:INFO:Initializing plot_model()
2023-12-07 11:36:39,714:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=5086, verbose=0, warm_start=False), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-07 11:36:39,714:INFO:Checking exceptions
2023-12-07 11:36:39,755:INFO:Preloading libraries
2023-12-07 11:36:39,771:INFO:Copying training dataset
2023-12-07 11:36:39,771:INFO:Plot type: pipeline
2023-12-07 11:36:40,145:INFO:Visual Rendered Successfully
2023-12-07 11:36:40,231:INFO:plot_model() successfully completed......................................
2023-12-07 11:37:29,562:INFO:Initializing plot_model()
2023-12-07 11:37:29,563:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=5086, verbose=0, warm_start=False), plot=auc, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2023-12-07 11:37:29,563:INFO:Checking exceptions
2023-12-07 11:37:29,600:INFO:Preloading libraries
2023-12-07 11:37:29,620:INFO:Copying training dataset
2023-12-07 11:37:29,621:INFO:Plot type: auc
2023-12-07 11:37:29,802:INFO:Fitting Model
2023-12-07 11:37:29,805:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but ExtraTreesClassifier was fitted with feature names
  warnings.warn(

2023-12-07 11:37:29,807:INFO:Scoring test/hold-out set
2023-12-07 11:37:30,212:INFO:Visual Rendered Successfully
2023-12-07 11:37:30,353:INFO:plot_model() successfully completed......................................
2023-12-07 11:37:44,848:INFO:Initializing tune_model()
2023-12-07 11:37:44,848:INFO:tune_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=5086, verbose=0, warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={})
2023-12-07 11:37:44,850:INFO:Checking exceptions
2023-12-07 11:37:44,884:INFO:Copying training dataset
2023-12-07 11:37:44,891:INFO:Checking base model
2023-12-07 11:37:44,891:INFO:Base model : Extra Trees Classifier
2023-12-07 11:37:44,902:INFO:Declaring metric variables
2023-12-07 11:37:44,912:INFO:Defining Hyperparameters
2023-12-07 11:37:45,174:INFO:Tuning with n_jobs=-1
2023-12-07 11:37:45,175:INFO:Initializing RandomizedSearchCV
2023-12-07 11:37:59,833:INFO:best_params: {'actual_estimator__n_estimators': 180, 'actual_estimator__min_samples_split': 5, 'actual_estimator__min_samples_leaf': 4, 'actual_estimator__min_impurity_decrease': 0.005, 'actual_estimator__max_features': 'sqrt', 'actual_estimator__max_depth': 5, 'actual_estimator__criterion': 'entropy', 'actual_estimator__class_weight': 'balanced', 'actual_estimator__bootstrap': True}
2023-12-07 11:37:59,833:INFO:Hyperparameter search completed
2023-12-07 11:37:59,833:INFO:SubProcess create_model() called ==================================
2023-12-07 11:37:59,833:INFO:Initializing create_model()
2023-12-07 11:37:59,833:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=5086, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E07DAB1810>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 180, 'min_samples_split': 5, 'min_samples_leaf': 4, 'min_impurity_decrease': 0.005, 'max_features': 'sqrt', 'max_depth': 5, 'criterion': 'entropy', 'class_weight': 'balanced', 'bootstrap': True})
2023-12-07 11:37:59,833:INFO:Checking exceptions
2023-12-07 11:37:59,833:INFO:Importing libraries
2023-12-07 11:37:59,833:INFO:Copying training dataset
2023-12-07 11:37:59,842:INFO:Defining folds
2023-12-07 11:37:59,842:INFO:Declaring metric variables
2023-12-07 11:37:59,850:INFO:Importing untrained model
2023-12-07 11:37:59,850:INFO:Declaring custom model
2023-12-07 11:37:59,850:INFO:Extra Trees Classifier Imported successfully
2023-12-07 11:37:59,866:INFO:Starting cross validation
2023-12-07 11:37:59,871:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-07 11:38:00,836:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,840:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,844:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,844:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,847:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,852:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,852:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,854:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,854:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,854:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,862:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,868:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,885:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,892:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,895:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,915:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,918:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,921:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,922:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,922:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,926:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,983:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,990:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:00,992:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:01,521:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:01,521:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:01,524:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:01,524:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:01,530:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:01,532:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:01,545:INFO:Calculating mean and std
2023-12-07 11:38:01,545:INFO:Creating metrics dataframe
2023-12-07 11:38:01,550:INFO:Finalizing model
2023-12-07 11:38:02,053:INFO:Uploading results into container
2023-12-07 11:38:02,053:INFO:Uploading model into container now
2023-12-07 11:38:02,053:INFO:_master_model_container: 15
2023-12-07 11:38:02,053:INFO:_display_container: 3
2023-12-07 11:38:02,053:INFO:ExtraTreesClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                     criterion='entropy', max_depth=5, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.005, min_samples_leaf=4,
                     min_samples_split=5, min_weight_fraction_leaf=0.0,
                     n_estimators=180, n_jobs=-1, oob_score=False,
                     random_state=5086, verbose=0, warm_start=False)
2023-12-07 11:38:02,053:INFO:create_model() successfully completed......................................
2023-12-07 11:38:02,167:INFO:SubProcess create_model() end ==================================
2023-12-07 11:38:02,167:INFO:choose_better activated
2023-12-07 11:38:02,172:INFO:SubProcess create_model() called ==================================
2023-12-07 11:38:02,172:INFO:Initializing create_model()
2023-12-07 11:38:02,172:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=5086, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-07 11:38:02,172:INFO:Checking exceptions
2023-12-07 11:38:02,175:INFO:Importing libraries
2023-12-07 11:38:02,175:INFO:Copying training dataset
2023-12-07 11:38:02,183:INFO:Defining folds
2023-12-07 11:38:02,183:INFO:Declaring metric variables
2023-12-07 11:38:02,183:INFO:Importing untrained model
2023-12-07 11:38:02,183:INFO:Declaring custom model
2023-12-07 11:38:02,183:INFO:Extra Trees Classifier Imported successfully
2023-12-07 11:38:02,183:INFO:Starting cross validation
2023-12-07 11:38:02,183:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-12-07 11:38:02,682:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:02,689:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:02,696:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:02,696:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:02,701:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:02,701:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:02,705:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:02,709:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:02,710:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:02,710:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:02,711:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:02,715:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:02,717:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:02,717:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:02,720:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:02,722:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:02,722:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:02,725:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:02,733:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:02,863:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:02,863:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:02,871:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:03,042:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:03,046:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:03,046:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:03,050:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:03,051:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:03,051:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-07 11:38:03,066:INFO:Calculating mean and std
2023-12-07 11:38:03,066:INFO:Creating metrics dataframe
2023-12-07 11:38:03,070:INFO:Finalizing model
2023-12-07 11:38:03,295:INFO:Uploading results into container
2023-12-07 11:38:03,295:INFO:Uploading model into container now
2023-12-07 11:38:03,295:INFO:_master_model_container: 16
2023-12-07 11:38:03,295:INFO:_display_container: 4
2023-12-07 11:38:03,295:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=5086, verbose=0, warm_start=False)
2023-12-07 11:38:03,295:INFO:create_model() successfully completed......................................
2023-12-07 11:38:03,392:INFO:SubProcess create_model() end ==================================
2023-12-07 11:38:03,400:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=5086, verbose=0, warm_start=False) result for Accuracy is 0.9709
2023-12-07 11:38:03,400:INFO:ExtraTreesClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                     criterion='entropy', max_depth=5, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.005, min_samples_leaf=4,
                     min_samples_split=5, min_weight_fraction_leaf=0.0,
                     n_estimators=180, n_jobs=-1, oob_score=False,
                     random_state=5086, verbose=0, warm_start=False) result for Accuracy is 0.9285
2023-12-07 11:38:03,401:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=5086, verbose=0, warm_start=False) is best model
2023-12-07 11:38:03,401:INFO:choose_better completed
2023-12-07 11:38:03,401:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2023-12-07 11:38:03,416:INFO:_master_model_container: 16
2023-12-07 11:38:03,416:INFO:_display_container: 3
2023-12-07 11:38:03,416:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=5086, verbose=0, warm_start=False)
2023-12-07 11:38:03,416:INFO:tune_model() successfully completed......................................
2023-12-07 11:38:40,431:INFO:Initializing interpret_model()
2023-12-07 11:38:40,433:INFO:interpret_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=5086, verbose=0, warm_start=False), plot=summary, feature=None, observation=None, use_train_data=False, X_new_sample=None, y_new_sample=None, save=False, kwargs={})
2023-12-07 11:38:40,433:INFO:Checking exceptions
2023-12-07 11:38:40,435:ERROR:
'shap' is a soft dependency and not included in the pycaret installation. Please run: `pip install shap` to install.
Alternately, you can install this by running `pip install pycaret[analysis]`
NoneType: None
2023-12-07 11:39:11,263:INFO:Initializing interpret_model()
2023-12-07 11:39:11,263:INFO:interpret_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=5086, verbose=0, warm_start=False), plot=summary, feature=None, observation=None, use_train_data=False, X_new_sample=None, y_new_sample=None, save=False, kwargs={})
2023-12-07 11:39:11,263:INFO:Checking exceptions
2023-12-07 11:39:11,263:ERROR:
'shap' is a soft dependency and not included in the pycaret installation. Please run: `pip install shap` to install.
Alternately, you can install this by running `pip install pycaret[analysis]`
NoneType: None
2023-12-07 11:57:43,372:INFO:Initializing plot_model()
2023-12-07 11:57:43,373:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=5086, verbose=0, warm_start=False), plot=auc, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-07 11:57:43,373:INFO:Checking exceptions
2023-12-07 11:57:43,447:INFO:Preloading libraries
2023-12-07 11:57:43,471:INFO:Copying training dataset
2023-12-07 11:57:43,472:INFO:Plot type: auc
2023-12-07 11:57:43,668:INFO:Fitting Model
2023-12-07 11:57:43,670:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but ExtraTreesClassifier was fitted with feature names
  warnings.warn(

2023-12-07 11:57:43,670:INFO:Scoring test/hold-out set
2023-12-07 11:57:44,084:INFO:Visual Rendered Successfully
2023-12-07 11:57:44,389:INFO:plot_model() successfully completed......................................
2023-12-07 11:57:48,893:INFO:Initializing plot_model()
2023-12-07 11:57:48,893:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=5086, verbose=0, warm_start=False), plot=parameter, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-07 11:57:48,894:INFO:Checking exceptions
2023-12-07 11:57:48,927:INFO:Preloading libraries
2023-12-07 11:57:48,938:INFO:Copying training dataset
2023-12-07 11:57:48,939:INFO:Plot type: parameter
2023-12-07 11:57:48,944:INFO:Visual Rendered Successfully
2023-12-07 11:57:49,040:INFO:plot_model() successfully completed......................................
2023-12-07 11:58:15,696:INFO:Initializing plot_model()
2023-12-07 11:58:15,696:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=5086, verbose=0, warm_start=False), plot=class_report, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-07 11:58:15,697:INFO:Checking exceptions
2023-12-07 11:58:15,729:INFO:Preloading libraries
2023-12-07 11:58:15,742:INFO:Copying training dataset
2023-12-07 11:58:15,742:INFO:Plot type: class_report
2023-12-07 11:58:15,871:INFO:Fitting Model
2023-12-07 11:58:15,871:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but ExtraTreesClassifier was fitted with feature names
  warnings.warn(

2023-12-07 11:58:15,872:INFO:Scoring test/hold-out set
2023-12-07 11:58:16,207:INFO:Visual Rendered Successfully
2023-12-07 11:58:16,348:INFO:plot_model() successfully completed......................................
2023-12-07 11:58:19,236:INFO:Initializing plot_model()
2023-12-07 11:58:19,237:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E07E3AB510>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=5086, verbose=0, warm_start=False), plot=confusion_matrix, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2023-12-07 11:58:19,237:INFO:Checking exceptions
2023-12-07 11:58:19,270:INFO:Preloading libraries
2023-12-07 11:58:19,282:INFO:Copying training dataset
2023-12-07 11:58:19,282:INFO:Plot type: confusion_matrix
2023-12-07 11:58:19,410:INFO:Fitting Model
2023-12-07 11:58:19,411:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but ExtraTreesClassifier was fitted with feature names
  warnings.warn(

2023-12-07 11:58:19,412:INFO:Scoring test/hold-out set
2023-12-07 11:58:19,632:INFO:Visual Rendered Successfully
2023-12-07 11:58:19,804:INFO:plot_model() successfully completed......................................
2023-12-07 12:32:19,365:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:19,618:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:19,902:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:20,120:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:20,336:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:20,556:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:21,043:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:21,489:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:21,970:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:22,405:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:22,847:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:23,968:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:25,058:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:26,178:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:27,280:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:45,323:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:45,548:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:45,769:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:45,995:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:46,220:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:46,442:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:46,893:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:47,356:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:47,804:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:48,297:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:48,761:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:49,864:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:50,964:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:52,085:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:32:53,177:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:11,731:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:11,981:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:12,214:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:12,443:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:12,668:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:12,898:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:13,346:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:13,788:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:14,265:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:14,723:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:15,173:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:16,302:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:17,430:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:18,577:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:19,709:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:39,067:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:39,313:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:39,550:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:39,792:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:40,157:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:40,475:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:41,048:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:41,625:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:42,290:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:42,820:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:43,313:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:44,537:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:45,754:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:47,022:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:33:48,270:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:08,325:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:08,567:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:08,823:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:09,062:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:09,305:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:09,545:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:10,024:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:10,496:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:10,972:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:11,467:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:12,068:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:13,558:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:15,013:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:16,404:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:17,823:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:39,224:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:39,538:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:39,998:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:40,273:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:40,612:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:40,882:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:41,405:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:41,891:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:42,376:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:42,834:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:43,306:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:44,549:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:45,993:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:47,103:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:34:48,206:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:09,202:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:09,424:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:09,800:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:10,106:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:10,428:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:10,666:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:11,129:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:11,689:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:12,178:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:12,649:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:13,106:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:14,222:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:15,352:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:16,463:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:17,586:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:36,542:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:36,769:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:36,999:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:37,230:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:37,462:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:37,692:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:38,150:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:38,605:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:39,065:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:39,520:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:40,007:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:41,165:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:42,323:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:43,469:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:35:44,613:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:04,907:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:05,188:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:05,430:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:05,675:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:05,921:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:06,169:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:06,674:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:07,170:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:07,648:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:08,117:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:08,588:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:09,757:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:10,913:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:12,138:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:13,314:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:32,727:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:32,965:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:33,205:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:33,444:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:33,680:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:33,922:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:34,473:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:34,934:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:35,400:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:35,875:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:36,344:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:37,511:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:38,688:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:39,934:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:36:41,077:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:37:03,354:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 12:48:33,566:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2023-12-07 12:48:44,733:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2023-12-07 12:49:27,249:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2023-12-07 12:49:34,341:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2023-12-07 12:50:56,223:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2023-12-07 12:51:21,042:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2023-12-07 13:14:21,979:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:22,199:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:22,387:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:22,583:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:22,775:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:22,999:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:23,381:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:23,752:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:24,121:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:24,502:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:24,936:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:25,595:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:26,162:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:26,723:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:27,278:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:28,146:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:28,344:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:28,529:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:28,726:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:28,945:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:29,147:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:29,710:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:30,103:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:30,496:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:30,873:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:31,239:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:31,814:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:32,366:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:32,933:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:33,498:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:34,064:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:34,255:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:34,450:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:34,641:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:34,837:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:35,031:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:35,404:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:35,772:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:36,138:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:36,512:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:36,878:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:37,432:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:37,989:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:38,549:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:14:39,103:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\ensemble\_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.
  warn(

2023-12-07 13:20:39,193:WARNING:c:\Users\sebas\anaconda3\envs\Modelos\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but ExtraTreesClassifier was fitted with feature names
  warnings.warn(

